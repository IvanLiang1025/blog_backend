2021-11-23 10:14:53:905 [restartedMain] INFO  com.ivan.sunnyblog.SunnyBlogApplication Starting SunnyBlogApplication on Jinghaos-MacBook-Air.local with PID 12180 (/Users/jinghaoliang/Documents/tech/Project/blogProject/SunnyBlog/target/classes started by jinghaoliang in /Users/jinghaoliang/Documents/tech/Project/blogProject/SunnyBlog)
2021-11-23 10:14:53:907 [restartedMain] INFO  com.ivan.sunnyblog.SunnyBlogApplication No active profile set, falling back to default profiles: default
2021-11-23 10:14:53:931 [restartedMain] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-11-23 10:14:53:931 [restartedMain] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-11-23 10:14:54:330 [restartedMain] INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2021-11-23 10:14:54:332 [restartedMain] INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data repositories in DEFAULT mode.
2021-11-23 10:14:54:361 [restartedMain] INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 20ms. Found 0 repository interfaces.
2021-11-23 10:14:54:625 [restartedMain] INFO  o.s.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$35f9c1be] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-11-23 10:14:54:891 [restartedMain] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8081 (http)
2021-11-23 10:14:54:898 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8081"]
2021-11-23 10:14:54:904 [restartedMain] INFO  org.apache.catalina.core.StandardService Starting service [Tomcat]
2021-11-23 10:14:54:904 [restartedMain] INFO  org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.21]
2021-11-23 10:14:54:981 [restartedMain] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2021-11-23 10:14:54:981 [restartedMain] INFO  org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 1050 ms
2021-11-23 10:14:55:185 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource HikariPool-1 - Starting...
2021-11-23 10:14:55:233 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource HikariPool-1 - Start completed.
2021-11-23 10:15:16:391 [restartedMain] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2021-11-23 10:15:16:633 [restartedMain] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler Initializing ExecutorService 'taskScheduler'
2021-11-23 10:15:16:661 [restartedMain] INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2021-11-23 10:15:16:726 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8081"]
2021-11-23 10:15:16:744 [restartedMain] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8081 (http) with context path ''
2021-11-23 10:15:16:746 [restartedMain] INFO  com.ivan.sunnyblog.SunnyBlogApplication Started SunnyBlogApplication in 23.073 seconds (JVM running for 23.677)
2021-11-23 10:18:14:869 [http-nio-8081-exec-3] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-11-23 10:18:14:869 [http-nio-8081-exec-3] INFO  org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2021-11-23 10:18:14:876 [http-nio-8081-exec-3] INFO  org.springframework.web.servlet.DispatcherServlet Completed initialization in 7 ms
2021-11-23 10:18:15:134 [http-nio-8081-exec-5] INFO  org.jooq.Constants 
                                      
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@  @@        @@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@        @@@@@@@@@@
@@@@@@@@@@@@@@@@  @@  @@    @@@@@@@@@@
@@@@@@@@@@  @@@@  @@  @@    @@@@@@@@@@
@@@@@@@@@@        @@        @@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@        @@        @@@@@@@@@@
@@@@@@@@@@    @@  @@  @@@@  @@@@@@@@@@
@@@@@@@@@@    @@  @@  @@@@  @@@@@@@@@@
@@@@@@@@@@        @@  @  @  @@@@@@@@@@
@@@@@@@@@@        @@        @@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@  @@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  Thank you for using jOOQ 3.11.11
                                      
2021-11-23 10:18:15:178 [http-nio-8081-exec-5] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log starts =====
2021-11-23 10:18:15:178 [http-nio-8081-exec-5] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request succeed
2021-11-23 10:18:15:178 [http-nio-8081-exec-5] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request Method: GET
2021-11-23 10:18:15:178 [http-nio-8081-exec-5] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request URI: /api/articles/hot
2021-11-23 10:18:15:178 [http-nio-8081-exec-5] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Method Name: com.ivan.sunnyblog.web.controller.ArticleController.getHotArticles
2021-11-23 10:18:15:178 [http-nio-8081-exec-5] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Params: {}
2021-11-23 10:18:15:178 [http-nio-8081-exec-4] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log starts =====
2021-11-23 10:18:15:179 [http-nio-8081-exec-4] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request succeed
2021-11-23 10:18:15:179 [http-nio-8081-exec-4] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request Method: GET
2021-11-23 10:18:15:179 [http-nio-8081-exec-4] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request URI: /api/categories
2021-11-23 10:18:15:179 [http-nio-8081-exec-4] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Method Name: com.ivan.sunnyblog.web.controller.CategoryContoller.getCategories
2021-11-23 10:18:15:178 [http-nio-8081-exec-5] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Result: ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=null, category=null, BaseArticleVo{articleId=10004, status=null, title='Spring boot', description='null', content='null', firstPicture='null', viewCount=4, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='null'}}, ArticleVo{userInfo=null, category=null, BaseArticleVo{articleId=10005, status=null, title='dd', description='null', content='null', firstPicture='null', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='null'}}], total=null}
2021-11-23 10:18:15:179 [http-nio-8081-exec-4] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Params: {}
2021-11-23 10:18:15:179 [http-nio-8081-exec-5] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Process Time: 267ms
2021-11-23 10:18:15:179 [http-nio-8081-exec-4] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Result: ResultInfo{info='null', status=0, data=[CategoryVo{categoryId=2, name='liddffd', articleCount=1}, CategoryVo{categoryId=1, name='Life ', articleCount=1}], total=null}
2021-11-23 10:18:15:179 [http-nio-8081-exec-5] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log ends =====
2021-11-23 10:18:15:179 [http-nio-8081-exec-4] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Process Time: 267ms
2021-11-23 10:18:15:179 [http-nio-8081-exec-4] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log ends =====
2021-11-23 10:18:15:187 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log starts =====
2021-11-23 10:18:15:187 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request succeed
2021-11-23 10:18:15:187 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request Method: GET
2021-11-23 10:18:15:187 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request URI: /api/articles
2021-11-23 10:18:15:187 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Method Name: com.ivan.sunnyblog.web.controller.ArticleController.getPublicArticles
2021-11-23 10:18:15:187 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Params: SearchVo{page=1, limit=10, categoryId=null, total=null}
2021-11-23 10:18:15:187 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Result: ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan', avatar='https://res-blog-public.s3.ca-central-1.amazonaws.com/default_avatar.jpg'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10005, status=1, title='dd', description='This is the doc of React markdown editor lite.
Enjoy!!', content='null', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Sun Nov 14 22:31:50 EST 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan', avatar='https://res-blog-public.s3.ca-central-1.amazonaws.com/default_avatar.jpg'}, category=CategoryVo{categoryId=2, name='liddffd', articleCount=null}, BaseArticleVo{articleId=10004, status=1, title='Spring boot', description='rerwerwer', content='null', firstPicture='', viewCount=4, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='Sun Nov 14 22:34:56 EST 2021'}}], total=2}
2021-11-23 10:18:15:187 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Process Time: 260ms
2021-11-23 10:18:15:187 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log ends =====
2021-11-23 10:18:16:816 [http-nio-8081-exec-8] INFO  io.lettuce.core.EpollProvider Starting without optional epoll library
2021-11-23 10:18:16:816 [http-nio-8081-exec-8] INFO  io.lettuce.core.KqueueProvider Starting without optional kqueue library
2021-11-23 10:18:16:885 [http-nio-8081-exec-8] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log starts =====
2021-11-23 10:18:16:885 [http-nio-8081-exec-8] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request succeed
2021-11-23 10:18:16:885 [http-nio-8081-exec-8] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request Method: GET
2021-11-23 10:18:16:885 [http-nio-8081-exec-8] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request URI: /api/article/10005
2021-11-23 10:18:16:885 [http-nio-8081-exec-8] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Method Name: com.ivan.sunnyblog.web.controller.ArticleController.getPublicArticleDetail
2021-11-23 10:18:16:885 [http-nio-8081-exec-8] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Params: 10005
2021-11-23 10:18:16:885 [http-nio-8081-exec-8] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Result: ResultInfo{info='null', status=0, data=ArticleDetailVo{categoryId=1, BaseArticleVo{articleId=10005, status=1, title='dd', description='This is the doc of React markdown editor lite.
Enjoy!!', content='| Head | Head | Head | Head |
| --- | --- | --- | --- |
| Data | Data | Data | Data |
| Data | Data | Data | Data |

## 手把手教你写一个markdown编辑器

> 笔者在18年年末的时候接到一个开发任务——搭建一个AI项目的开放平台，其中的产品文档为转化为HTML格式的markdown文档。考虑到文档的即时更新，将文档信息做成了Ajax接口的形式。因此管理后台只需将textarea表单的内容通过markdown解析器进行HTML格式转化，然后将markdown内容和经转化的HTML文档都保存到数据库即可。
> 基本需求完成后，为了更好的用户体验，考虑将常用的编辑功能添加进来。改进版不仅支持了常用的文本编辑功能，还实现的UI界面的配置化，自定义语法解析器。本着造福伸手党的目的，以及积累些开源经验，笔者将该react 组件 [react-markdown-editor-lite](https://github.com/HarryChen0506/react-markdown-editor-lite) 进行了封装改造，并且发布到了开源社区。

### 预览
在线体验 [https://harrychen0506.github.io/react-markdown-editor-lite/](https://harrychen0506.github.io/react-markdown-editor-lite/)

![image](https://github.com//HarryChen0506/react-markdown-editor-lite/blob/master/image/react-markdown-editor-lite-v1.0.0.PNG?raw=true)

### 特点
* 轻量、基于React
* UI可配置, 如只显示编辑区或预览区
* 支持自定义markdown语法解析器,语法高亮等
* 支持常用的markdown编辑功能，如加粗，斜体等等...
* 支持功能按钮插拔化，用户可以自定义扩展组件
* 支持编辑区和预览区同步滚动

### 开发心得

- 文本编辑

  大多数常见的编辑器，包括富文本编辑器，利用了某些元素如div的contenteditable属性，配合selection、range、execCommand等API，实现了富文本编辑功能。这里面的实现比较复杂，所以有了"[为什么都说富文本编辑器是天坑？](https://www.zhihu.com/question/38699645)"这个说法。

  而markdown编辑器，核心的处理内容为简单语法的纯文本，复杂度相对来说比较低，并且input标签自带onSelect事件，可以很方便的获取选择信息（选择起始位置和选择文本值），因此要想实现编辑功能，只需将要改动的内容进行文本转换，然后进行重新拼接首尾，大功告成。
  
- markdown解析

  考察了几个社区流行的markdown解析器，比较流行的有[markdown](https://www.npmjs.com/package/markdown), [markdown-it](https://www.npmjs.com/package/markdown-it), [marked](https://www.npmjs.com/package/marked) 等等。综合考虑扩展性以及稳定性，笔者推荐使用markdown-it作为markdown的词法解析器，因为该解析器有比较多的插件，并且支持语法高亮。

- 同步滚动

  当选择分栏编辑的时候，滚动左侧的编辑区，右侧的预览区能自动滚动到对应的区域。方案参考了《[手把手教你用 100行代码实现基于 react的 markdown 输入 + 即时预览在线编辑器（一）](https://github.com/accforgit/blog-data/blob/master/%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91%E5%99%A8/README/README1.md)》。只需先计算出输入框容器元素与预览框容器元素之间最大scroll范围的比例值，然后根据主动滚动元素自身的scrollTop做相应的比例换算，即可知道对方区域的scrollTop值。

- 关于UI
 
  - 项目的字体库选择了Font Awesome风格，并且只选取了项目所需要的一些图标。
  - 编辑器的整体css均可通过全局覆盖的形式进行自定义。目前暂时只支持灰色主题。
  - 编辑器的显示区域包括菜单栏，编辑器，预览区，工具栏，通过配置组件的config属性，可以选择默认的展示区域。
  
### Install

```js
npm install react-markdown-editor-lite --save
```

### Props

| Property | Description | Type | default | Remarks |
| --- | --- | --- | --- | --- |
| value | markdown content | String | '' | required |
| style | component container style | Object | {height: '100%'} | not required |
| config | component config | Object | {view: {...}, logger: {...}} | not required |
| onChange | emitting when editor has changed | Function | ({html, md}) => {} | not required |
| onImageUpload | when image uploaded, callback emitting will get image markdown text | (file: File, callback: (url: string) => void) => void; | ({file, callback}) => {} | not required |
| renderHTML | Render markdown text to HTML. You can return either string, function or Promise | (text: string) => string|function|Promise | none | **required** |

### Example

``` js
'use strict';
import React from 'react'
import ReactDOM from 'react-dom'
import MdEditor from 'react-markdown-editor-lite'
import MarkdownIt from 'markdown-it'
import emoji from 'markdown-it-emoji'
import subscript from 'markdown-it-sub'
import superscript from 'markdown-it-sup'
import footnote from 'markdown-it-footnote'
import deflist from 'markdown-it-deflist'
import abbreviation from 'markdown-it-abbr'
import insert from 'markdown-it-ins'
import mark from 'markdown-it-mark'
import tasklists from 'markdown-it-task-lists'
import hljs from 'highlight.js'
import 'highlight.js/styles/atom-one-light.css'
// import 'highlight.js/styles/github.css'
import './index.less';

const MOCK_DATA = "I Love React."
export default class Demo extends React.Component {
  mdEditor = null
  mdParser = null
  constructor(props) {
    super(props)
    // initial a parsera
    this.mdParser = new MarkdownIt({
      html: true,
      linkify: true,
      typographer: true,
      highlight: function (str, lang) {
        if (lang && hljs.getLanguage(lang)) {
          try {
            return hljs.highlight(lang, str).value
          } catch (__) {}
        }    
        return '' // use external default escaping
      }
    })
    .use(emoji)
    .use(subscript)
    .use(superscript)
    .use(footnote)
    .use(deflist)
    .use(abbreviation)
    .use(insert)
    .use(mark)
    .use(tasklists, { enabled: this.taskLists })
    this.renderHTML = this.renderHTML.bind(this)
  }
  handleEditorChange({html, md}) {
    console.log('handleEditorChange', html, md)
  }
  handleImageUpload(file, callback) {
    const reader = new FileReader()
    reader.onload = () => {      
      const convertBase64UrlToBlob = (urlData) => {  
        let arr = urlData.split(','), mime = arr[0].match(/:(.*?);/)[1]
        let bstr = atob(arr[1])
        let n = bstr.length
        let u8arr = new Uint8Array(n)
        while (n--) {
          u8arr[n] = bstr.charCodeAt(n)
        }
        return new Blob([u8arr], {type:mime})
      }
      const blob = convertBase64UrlToBlob(reader.result)
      setTimeout(() => {
        // setTimeout 模拟异步上传图片
        // 当异步上传获取图片地址后，执行calback回调（参数为imageUrl字符串），即可将图片地址写入markdown
        callback('https://avatars0.githubusercontent.com/u/21263805?s=40&v=4')
      }, 1000)
    }
    reader.readAsDataURL(file)
  }
  renderHTML(text) {
    // 模拟异步渲染Markdown
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve(this.mdParser.render(text))
      }, 1000)
    })
  }
  handleGetMdValue = () => {   
    this.mdEditor && alert(this.mdEditor.getMdValue())      
  }
  handleGetHtmlValue = () => {    
    this.mdEditor && alert(this.mdEditor.getHtmlValue())
  }
  render() {
    return (      
      <div>
        <nav>
          <button onClick={this.handleGetMdValue} >getMdValue</button>  
          <button onClick={this.handleGetHtmlValue} >getHtmlValue</button>  
        </nav>
        <section style="height: 500px">
          <MdEditor 
            ref={node => this.mdEditor = node}
            value={MOCK_DATA}
            style={{height: '400px'}}
            renderHTML={this.renderHTML}
            config={{
              view: {
                menu: true,
                md: true,
                html: true
              },
              imageUrl: 'https://octodex.github.com/images/minion.png'
            }}
            onChange={this.handleEditorChange} 
            onImageUpload={this.handleImageUpload}
          />
        </section>                        
      </div>      
    )
  }
}
```

### 最后

   欢迎大家使用和反馈，[项目地址](https://github.com/HarryChen0506/react-markdown-editor-lite) (https://github.com/HarryChen0506/react-markdown-editor-lite)， 你的点赞将是我莫大的动力😊

![1.png](https://s3.ca-central-1.amazonaws.com/res-blog-public/res-dev/blog_1636946743939_1.png)', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Sun Nov 14 22:31:50 EST 2021'}}, total=null}
2021-11-23 10:18:16:885 [http-nio-8081-exec-8] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Process Time: 148ms
2021-11-23 10:18:16:885 [http-nio-8081-exec-8] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log ends =====
2021-11-23 10:20:50:467 [http-nio-8081-exec-1] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log starts =====
2021-11-23 10:20:50:468 [http-nio-8081-exec-1] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request succeed
2021-11-23 10:20:50:468 [http-nio-8081-exec-1] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request Method: GET
2021-11-23 10:20:50:468 [http-nio-8081-exec-1] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request URI: /api/comment/10005
2021-11-23 10:20:50:468 [http-nio-8081-exec-1] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Method Name: com.ivan.sunnyblog.web.controller.CommentController.getComments
2021-11-23 10:20:50:468 [http-nio-8081-exec-1] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Params: 10005
2021-11-23 10:20:50:468 [http-nio-8081-exec-1] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Result: ResultInfo{info='null', status=0, data=[], total=null}
2021-11-23 10:20:50:468 [http-nio-8081-exec-1] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Process Time: 22ms
2021-11-23 10:20:50:468 [http-nio-8081-exec-1] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log ends =====
2021-11-23 10:21:58:405 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log starts =====
2021-11-23 10:21:58:405 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request succeed
2021-11-23 10:21:58:405 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request Method: GET
2021-11-23 10:21:58:406 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request URI: /api/comment/10004
2021-11-23 10:21:58:406 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Method Name: com.ivan.sunnyblog.web.controller.CommentController.getComments
2021-11-23 10:21:58:406 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Params: 10004
2021-11-23 10:21:58:406 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Result: ResultInfo{info='null', status=0, data=[CommentListVo{commentId=1, replyComments=[], CommentVo=CommentVo{parentCommentId=0, articleId=10004, email='ivanliang0818@gmail.com', nickname='test', parentCommentNickname='null', content='test', status='0'}}], total=null}
2021-11-23 10:21:58:406 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Process Time: 19ms
2021-11-23 10:21:58:406 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log ends =====
2021-11-23 10:25:45:740 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1m35s973ms).
2021-11-23 10:46:51:726 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=16m5s941ms).
2021-11-23 10:59:05:218 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=12m13s492ms).
2021-11-23 12:18:41:199 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h19m35s980ms).
2021-11-23 13:58:16:208 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h39m35s10ms).
2021-11-23 14:40:56:452 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=42m40s244ms).
2021-11-23 15:01:42:135 [http-nio-8081-exec-8] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log starts =====
2021-11-23 15:01:42:135 [http-nio-8081-exec-9] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log starts =====
2021-11-23 15:01:42:135 [http-nio-8081-exec-8] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request succeed
2021-11-23 15:01:42:135 [http-nio-8081-exec-9] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request succeed
2021-11-23 15:01:42:135 [http-nio-8081-exec-8] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request Method: GET
2021-11-23 15:01:42:135 [http-nio-8081-exec-8] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request URI: /api/articles/hot
2021-11-23 15:01:42:135 [http-nio-8081-exec-8] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Method Name: com.ivan.sunnyblog.web.controller.ArticleController.getHotArticles
2021-11-23 15:01:42:135 [http-nio-8081-exec-8] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Params: {}
2021-11-23 15:01:42:135 [http-nio-8081-exec-9] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request Method: GET
2021-11-23 15:01:42:136 [http-nio-8081-exec-8] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Result: ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=null, category=null, BaseArticleVo{articleId=10004, status=null, title='Spring boot', description='null', content='null', firstPicture='null', viewCount=4, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='null'}}, ArticleVo{userInfo=null, category=null, BaseArticleVo{articleId=10005, status=null, title='dd', description='null', content='null', firstPicture='null', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='null'}}], total=null}
2021-11-23 15:01:42:136 [http-nio-8081-exec-8] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Process Time: 25ms
2021-11-23 15:01:42:136 [http-nio-8081-exec-9] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request URI: /api/categories
2021-11-23 15:01:42:136 [http-nio-8081-exec-8] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log ends =====
2021-11-23 15:01:42:136 [http-nio-8081-exec-9] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Method Name: com.ivan.sunnyblog.web.controller.CategoryContoller.getCategories
2021-11-23 15:01:42:136 [http-nio-8081-exec-9] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Params: {}
2021-11-23 15:01:42:136 [http-nio-8081-exec-9] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Result: ResultInfo{info='null', status=0, data=[CategoryVo{categoryId=2, name='liddffd', articleCount=1}, CategoryVo{categoryId=1, name='Life ', articleCount=1}], total=null}
2021-11-23 15:01:42:136 [http-nio-8081-exec-9] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Process Time: 26ms
2021-11-23 15:01:42:136 [http-nio-8081-exec-9] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log ends =====
2021-11-23 15:01:42:159 [http-nio-8081-exec-10] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log starts =====
2021-11-23 15:01:42:159 [http-nio-8081-exec-10] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request succeed
2021-11-23 15:01:42:159 [http-nio-8081-exec-10] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request Method: GET
2021-11-23 15:01:42:159 [http-nio-8081-exec-10] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request URI: /api/articles
2021-11-23 15:01:42:159 [http-nio-8081-exec-10] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Method Name: com.ivan.sunnyblog.web.controller.ArticleController.getPublicArticles
2021-11-23 15:01:42:159 [http-nio-8081-exec-10] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Params: SearchVo{page=1, limit=10, categoryId=null, total=null}
2021-11-23 15:01:42:159 [http-nio-8081-exec-10] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Result: ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan', avatar='https://res-blog-public.s3.ca-central-1.amazonaws.com/default_avatar.jpg'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10005, status=1, title='dd', description='This is the doc of React markdown editor lite.
Enjoy!!', content='null', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Sun Nov 14 22:31:50 EST 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan', avatar='https://res-blog-public.s3.ca-central-1.amazonaws.com/default_avatar.jpg'}, category=CategoryVo{categoryId=2, name='liddffd', articleCount=null}, BaseArticleVo{articleId=10004, status=1, title='Spring boot', description='rerwerwer', content='null', firstPicture='', viewCount=4, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='Sun Nov 14 22:34:56 EST 2021'}}], total=2}
2021-11-23 15:01:42:159 [http-nio-8081-exec-10] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Process Time: 45ms
2021-11-23 15:01:42:159 [http-nio-8081-exec-10] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log ends =====
2021-11-23 15:03:23:527 [http-nio-8081-exec-5] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log starts =====
2021-11-23 15:03:23:528 [http-nio-8081-exec-5] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request succeed
2021-11-23 15:03:23:528 [http-nio-8081-exec-5] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request Method: GET
2021-11-23 15:03:23:528 [http-nio-8081-exec-5] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request URI: /api/categories
2021-11-23 15:03:23:528 [http-nio-8081-exec-5] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Method Name: com.ivan.sunnyblog.web.controller.CategoryContoller.getCategories
2021-11-23 15:03:23:528 [http-nio-8081-exec-5] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Params: {}
2021-11-23 15:03:23:528 [http-nio-8081-exec-5] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Result: ResultInfo{info='null', status=0, data=[CategoryVo{categoryId=2, name='liddffd', articleCount=1}, CategoryVo{categoryId=1, name='Life ', articleCount=1}], total=null}
2021-11-23 15:03:23:528 [http-nio-8081-exec-5] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Process Time: 4ms
2021-11-23 15:03:23:528 [http-nio-8081-exec-5] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log ends =====
2021-11-23 15:03:23:536 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log starts =====
2021-11-23 15:03:23:536 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request succeed
2021-11-23 15:03:23:536 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request Method: GET
2021-11-23 15:03:23:536 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request URI: /api/articles/hot
2021-11-23 15:03:23:536 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Method Name: com.ivan.sunnyblog.web.controller.ArticleController.getHotArticles
2021-11-23 15:03:23:536 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Params: {}
2021-11-23 15:03:23:536 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Result: ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=null, category=null, BaseArticleVo{articleId=10004, status=null, title='Spring boot', description='null', content='null', firstPicture='null', viewCount=4, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='null'}}, ArticleVo{userInfo=null, category=null, BaseArticleVo{articleId=10005, status=null, title='dd', description='null', content='null', firstPicture='null', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='null'}}], total=null}
2021-11-23 15:03:23:536 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Process Time: 10ms
2021-11-23 15:03:23:537 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log ends =====
2021-11-23 15:03:23:546 [http-nio-8081-exec-4] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log starts =====
2021-11-23 15:03:23:546 [http-nio-8081-exec-4] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request succeed
2021-11-23 15:03:23:546 [http-nio-8081-exec-4] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request Method: GET
2021-11-23 15:03:23:546 [http-nio-8081-exec-4] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request URI: /api/articles
2021-11-23 15:03:23:547 [http-nio-8081-exec-4] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Method Name: com.ivan.sunnyblog.web.controller.ArticleController.getPublicArticles
2021-11-23 15:03:23:547 [http-nio-8081-exec-4] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Params: SearchVo{page=1, limit=10, categoryId=null, total=null}
2021-11-23 15:03:23:547 [http-nio-8081-exec-4] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Result: ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan', avatar='https://res-blog-public.s3.ca-central-1.amazonaws.com/default_avatar.jpg'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10005, status=1, title='dd', description='This is the doc of React markdown editor lite.
Enjoy!!', content='null', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Sun Nov 14 22:31:50 EST 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan', avatar='https://res-blog-public.s3.ca-central-1.amazonaws.com/default_avatar.jpg'}, category=CategoryVo{categoryId=2, name='liddffd', articleCount=null}, BaseArticleVo{articleId=10004, status=1, title='Spring boot', description='rerwerwer', content='null', firstPicture='', viewCount=4, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='Sun Nov 14 22:34:56 EST 2021'}}], total=2}
2021-11-23 15:03:23:547 [http-nio-8081-exec-4] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Process Time: 23ms
2021-11-23 15:03:23:547 [http-nio-8081-exec-4] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log ends =====
2021-11-23 15:03:32:452 [http-nio-8081-exec-7] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log starts =====
2021-11-23 15:03:32:452 [http-nio-8081-exec-7] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request succeed
2021-11-23 15:03:32:452 [http-nio-8081-exec-7] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request Method: GET
2021-11-23 15:03:32:452 [http-nio-8081-exec-7] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request URI: /api/article/10005
2021-11-23 15:03:32:452 [http-nio-8081-exec-7] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Method Name: com.ivan.sunnyblog.web.controller.ArticleController.getPublicArticleDetail
2021-11-23 15:03:32:452 [http-nio-8081-exec-7] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Params: 10005
2021-11-23 15:03:32:452 [http-nio-8081-exec-7] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Result: ResultInfo{info='null', status=0, data=ArticleDetailVo{categoryId=1, BaseArticleVo{articleId=10005, status=1, title='dd', description='This is the doc of React markdown editor lite.
Enjoy!!', content='| Head | Head | Head | Head |
| --- | --- | --- | --- |
| Data | Data | Data | Data |
| Data | Data | Data | Data |

## 手把手教你写一个markdown编辑器

> 笔者在18年年末的时候接到一个开发任务——搭建一个AI项目的开放平台，其中的产品文档为转化为HTML格式的markdown文档。考虑到文档的即时更新，将文档信息做成了Ajax接口的形式。因此管理后台只需将textarea表单的内容通过markdown解析器进行HTML格式转化，然后将markdown内容和经转化的HTML文档都保存到数据库即可。
> 基本需求完成后，为了更好的用户体验，考虑将常用的编辑功能添加进来。改进版不仅支持了常用的文本编辑功能，还实现的UI界面的配置化，自定义语法解析器。本着造福伸手党的目的，以及积累些开源经验，笔者将该react 组件 [react-markdown-editor-lite](https://github.com/HarryChen0506/react-markdown-editor-lite) 进行了封装改造，并且发布到了开源社区。

### 预览
在线体验 [https://harrychen0506.github.io/react-markdown-editor-lite/](https://harrychen0506.github.io/react-markdown-editor-lite/)

![image](https://github.com//HarryChen0506/react-markdown-editor-lite/blob/master/image/react-markdown-editor-lite-v1.0.0.PNG?raw=true)

### 特点
* 轻量、基于React
* UI可配置, 如只显示编辑区或预览区
* 支持自定义markdown语法解析器,语法高亮等
* 支持常用的markdown编辑功能，如加粗，斜体等等...
* 支持功能按钮插拔化，用户可以自定义扩展组件
* 支持编辑区和预览区同步滚动

### 开发心得

- 文本编辑

  大多数常见的编辑器，包括富文本编辑器，利用了某些元素如div的contenteditable属性，配合selection、range、execCommand等API，实现了富文本编辑功能。这里面的实现比较复杂，所以有了"[为什么都说富文本编辑器是天坑？](https://www.zhihu.com/question/38699645)"这个说法。

  而markdown编辑器，核心的处理内容为简单语法的纯文本，复杂度相对来说比较低，并且input标签自带onSelect事件，可以很方便的获取选择信息（选择起始位置和选择文本值），因此要想实现编辑功能，只需将要改动的内容进行文本转换，然后进行重新拼接首尾，大功告成。
  
- markdown解析

  考察了几个社区流行的markdown解析器，比较流行的有[markdown](https://www.npmjs.com/package/markdown), [markdown-it](https://www.npmjs.com/package/markdown-it), [marked](https://www.npmjs.com/package/marked) 等等。综合考虑扩展性以及稳定性，笔者推荐使用markdown-it作为markdown的词法解析器，因为该解析器有比较多的插件，并且支持语法高亮。

- 同步滚动

  当选择分栏编辑的时候，滚动左侧的编辑区，右侧的预览区能自动滚动到对应的区域。方案参考了《[手把手教你用 100行代码实现基于 react的 markdown 输入 + 即时预览在线编辑器（一）](https://github.com/accforgit/blog-data/blob/master/%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91%E5%99%A8/README/README1.md)》。只需先计算出输入框容器元素与预览框容器元素之间最大scroll范围的比例值，然后根据主动滚动元素自身的scrollTop做相应的比例换算，即可知道对方区域的scrollTop值。

- 关于UI
 
  - 项目的字体库选择了Font Awesome风格，并且只选取了项目所需要的一些图标。
  - 编辑器的整体css均可通过全局覆盖的形式进行自定义。目前暂时只支持灰色主题。
  - 编辑器的显示区域包括菜单栏，编辑器，预览区，工具栏，通过配置组件的config属性，可以选择默认的展示区域。
  
### Install

```js
npm install react-markdown-editor-lite --save
```

### Props

| Property | Description | Type | default | Remarks |
| --- | --- | --- | --- | --- |
| value | markdown content | String | '' | required |
| style | component container style | Object | {height: '100%'} | not required |
| config | component config | Object | {view: {...}, logger: {...}} | not required |
| onChange | emitting when editor has changed | Function | ({html, md}) => {} | not required |
| onImageUpload | when image uploaded, callback emitting will get image markdown text | (file: File, callback: (url: string) => void) => void; | ({file, callback}) => {} | not required |
| renderHTML | Render markdown text to HTML. You can return either string, function or Promise | (text: string) => string|function|Promise | none | **required** |

### Example

``` js
'use strict';
import React from 'react'
import ReactDOM from 'react-dom'
import MdEditor from 'react-markdown-editor-lite'
import MarkdownIt from 'markdown-it'
import emoji from 'markdown-it-emoji'
import subscript from 'markdown-it-sub'
import superscript from 'markdown-it-sup'
import footnote from 'markdown-it-footnote'
import deflist from 'markdown-it-deflist'
import abbreviation from 'markdown-it-abbr'
import insert from 'markdown-it-ins'
import mark from 'markdown-it-mark'
import tasklists from 'markdown-it-task-lists'
import hljs from 'highlight.js'
import 'highlight.js/styles/atom-one-light.css'
// import 'highlight.js/styles/github.css'
import './index.less';

const MOCK_DATA = "I Love React."
export default class Demo extends React.Component {
  mdEditor = null
  mdParser = null
  constructor(props) {
    super(props)
    // initial a parsera
    this.mdParser = new MarkdownIt({
      html: true,
      linkify: true,
      typographer: true,
      highlight: function (str, lang) {
        if (lang && hljs.getLanguage(lang)) {
          try {
            return hljs.highlight(lang, str).value
          } catch (__) {}
        }    
        return '' // use external default escaping
      }
    })
    .use(emoji)
    .use(subscript)
    .use(superscript)
    .use(footnote)
    .use(deflist)
    .use(abbreviation)
    .use(insert)
    .use(mark)
    .use(tasklists, { enabled: this.taskLists })
    this.renderHTML = this.renderHTML.bind(this)
  }
  handleEditorChange({html, md}) {
    console.log('handleEditorChange', html, md)
  }
  handleImageUpload(file, callback) {
    const reader = new FileReader()
    reader.onload = () => {      
      const convertBase64UrlToBlob = (urlData) => {  
        let arr = urlData.split(','), mime = arr[0].match(/:(.*?);/)[1]
        let bstr = atob(arr[1])
        let n = bstr.length
        let u8arr = new Uint8Array(n)
        while (n--) {
          u8arr[n] = bstr.charCodeAt(n)
        }
        return new Blob([u8arr], {type:mime})
      }
      const blob = convertBase64UrlToBlob(reader.result)
      setTimeout(() => {
        // setTimeout 模拟异步上传图片
        // 当异步上传获取图片地址后，执行calback回调（参数为imageUrl字符串），即可将图片地址写入markdown
        callback('https://avatars0.githubusercontent.com/u/21263805?s=40&v=4')
      }, 1000)
    }
    reader.readAsDataURL(file)
  }
  renderHTML(text) {
    // 模拟异步渲染Markdown
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve(this.mdParser.render(text))
      }, 1000)
    })
  }
  handleGetMdValue = () => {   
    this.mdEditor && alert(this.mdEditor.getMdValue())      
  }
  handleGetHtmlValue = () => {    
    this.mdEditor && alert(this.mdEditor.getHtmlValue())
  }
  render() {
    return (      
      <div>
        <nav>
          <button onClick={this.handleGetMdValue} >getMdValue</button>  
          <button onClick={this.handleGetHtmlValue} >getHtmlValue</button>  
        </nav>
        <section style="height: 500px">
          <MdEditor 
            ref={node => this.mdEditor = node}
            value={MOCK_DATA}
            style={{height: '400px'}}
            renderHTML={this.renderHTML}
            config={{
              view: {
                menu: true,
                md: true,
                html: true
              },
              imageUrl: 'https://octodex.github.com/images/minion.png'
            }}
            onChange={this.handleEditorChange} 
            onImageUpload={this.handleImageUpload}
          />
        </section>                        
      </div>      
    )
  }
}
```

### 最后

   欢迎大家使用和反馈，[项目地址](https://github.com/HarryChen0506/react-markdown-editor-lite) (https://github.com/HarryChen0506/react-markdown-editor-lite)， 你的点赞将是我莫大的动力😊

![1.png](https://s3.ca-central-1.amazonaws.com/res-blog-public/res-dev/blog_1636946743939_1.png)', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Sun Nov 14 22:31:50 EST 2021'}}, total=null}
2021-11-23 15:03:32:452 [http-nio-8081-exec-7] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Process Time: 36ms
2021-11-23 15:03:32:452 [http-nio-8081-exec-7] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log ends =====
2021-11-23 15:03:34:659 [http-nio-8081-exec-9] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log starts =====
2021-11-23 15:03:34:660 [http-nio-8081-exec-9] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request succeed
2021-11-23 15:03:34:660 [http-nio-8081-exec-9] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request Method: GET
2021-11-23 15:03:34:660 [http-nio-8081-exec-9] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request URI: /api/categories
2021-11-23 15:03:34:660 [http-nio-8081-exec-9] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Method Name: com.ivan.sunnyblog.web.controller.CategoryContoller.getCategories
2021-11-23 15:03:34:660 [http-nio-8081-exec-9] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Params: {}
2021-11-23 15:03:34:660 [http-nio-8081-exec-9] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Result: ResultInfo{info='null', status=0, data=[CategoryVo{categoryId=2, name='liddffd', articleCount=1}, CategoryVo{categoryId=1, name='Life ', articleCount=1}], total=null}
2021-11-23 15:03:34:660 [http-nio-8081-exec-9] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Process Time: 4ms
2021-11-23 15:03:34:660 [http-nio-8081-exec-9] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log ends =====
2021-11-23 15:03:34:665 [http-nio-8081-exec-10] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log starts =====
2021-11-23 15:03:34:665 [http-nio-8081-exec-10] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request succeed
2021-11-23 15:03:34:665 [http-nio-8081-exec-10] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request Method: GET
2021-11-23 15:03:34:665 [http-nio-8081-exec-10] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request URI: /api/articles/hot
2021-11-23 15:03:34:665 [http-nio-8081-exec-10] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Method Name: com.ivan.sunnyblog.web.controller.ArticleController.getHotArticles
2021-11-23 15:03:34:665 [http-nio-8081-exec-10] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Params: {}
2021-11-23 15:03:34:665 [http-nio-8081-exec-10] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Result: ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=null, category=null, BaseArticleVo{articleId=10004, status=null, title='Spring boot', description='null', content='null', firstPicture='null', viewCount=4, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='null'}}, ArticleVo{userInfo=null, category=null, BaseArticleVo{articleId=10005, status=null, title='dd', description='null', content='null', firstPicture='null', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='null'}}], total=null}
2021-11-23 15:03:34:665 [http-nio-8081-exec-10] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Process Time: 8ms
2021-11-23 15:03:34:665 [http-nio-8081-exec-10] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log ends =====
2021-11-23 15:03:34:679 [http-nio-8081-exec-8] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log starts =====
2021-11-23 15:03:34:679 [http-nio-8081-exec-8] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request succeed
2021-11-23 15:03:34:679 [http-nio-8081-exec-8] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request Method: GET
2021-11-23 15:03:34:679 [http-nio-8081-exec-8] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request URI: /api/articles
2021-11-23 15:03:34:679 [http-nio-8081-exec-8] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Method Name: com.ivan.sunnyblog.web.controller.ArticleController.getPublicArticles
2021-11-23 15:03:34:679 [http-nio-8081-exec-8] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Params: SearchVo{page=1, limit=10, categoryId=null, total=null}
2021-11-23 15:03:34:679 [http-nio-8081-exec-8] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Result: ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan', avatar='https://res-blog-public.s3.ca-central-1.amazonaws.com/default_avatar.jpg'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10005, status=1, title='dd', description='This is the doc of React markdown editor lite.
Enjoy!!', content='null', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Sun Nov 14 22:31:50 EST 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan', avatar='https://res-blog-public.s3.ca-central-1.amazonaws.com/default_avatar.jpg'}, category=CategoryVo{categoryId=2, name='liddffd', articleCount=null}, BaseArticleVo{articleId=10004, status=1, title='Spring boot', description='rerwerwer', content='null', firstPicture='', viewCount=4, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='Sun Nov 14 22:34:56 EST 2021'}}], total=2}
2021-11-23 15:03:34:679 [http-nio-8081-exec-8] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Process Time: 24ms
2021-11-23 15:03:34:679 [http-nio-8081-exec-8] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log ends =====
2021-11-23 15:03:35:968 [http-nio-8081-exec-1] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log starts =====
2021-11-23 15:03:35:969 [http-nio-8081-exec-1] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request succeed
2021-11-23 15:03:35:969 [http-nio-8081-exec-1] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request Method: GET
2021-11-23 15:03:35:969 [http-nio-8081-exec-1] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Request URI: /api/article/10004
2021-11-23 15:03:35:969 [http-nio-8081-exec-1] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Method Name: com.ivan.sunnyblog.web.controller.ArticleController.getPublicArticleDetail
2021-11-23 15:03:35:969 [http-nio-8081-exec-1] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Params: 10004
2021-11-23 15:03:35:969 [http-nio-8081-exec-1] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Result: ResultInfo{info='null', status=0, data=ArticleDetailVo{categoryId=2, BaseArticleVo{articleId=10004, status=1, title='Spring boot', description='rerwerwer', content='rererer![test.png](https://s3.ca-central-1.amazonaws.com/res-blog-public/res-dev/blog_1636947281578_test.png)', firstPicture='', viewCount=4, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='Sun Nov 14 22:34:56 EST 2021'}}, total=null}
2021-11-23 15:03:35:969 [http-nio-8081-exec-1] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect Process Time: 4ms
2021-11-23 15:03:35:969 [http-nio-8081-exec-1] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect ===== log ends =====
2021-11-23 16:07:45:060 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h1m18s448ms).
2021-11-23 17:47:43:534 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h39m58s474ms).
2021-11-23 19:09:43:765 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h22m230ms).
2021-11-23 20:45:39:693 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h35m55s928ms).
2021-11-23 21:38:36:881 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=52m57s189ms).
2021-11-23 22:26:30:169 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=47m53s285ms).
2021-11-23 22:29:26:793 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=2m26s600ms).
2021-11-23 22:45:53:605 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m56s805ms).
2021-11-23 23:00:23:026 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=12m29s407ms).
2021-11-23 23:00:29:383 [Thread-54] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler Shutting down ExecutorService 'taskScheduler'
2021-11-23 23:00:29:385 [Thread-54] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2021-11-23 23:00:29:393 [Thread-54] INFO  com.zaxxer.hikari.HikariDataSource HikariPool-1 - Shutdown initiated...
2021-11-23 23:00:29:397 [Thread-54] INFO  com.zaxxer.hikari.HikariDataSource HikariPool-1 - Shutdown completed.
