2021-11-08 09:01:48:043 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h9m52s393ms).
2021-11-08 09:10:45:652 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 105ms GET URI=/api/admin/article, methodName=com.ivan.sunnyblog.web.controller.ArticleController.getArticleList, args=[SearchVo{page=1, limit=20, categoryId=null}], result=ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10005, status=1, title='dd', description='test
sd
f
fdfsdfs', content='null', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Sun Nov 07 20:21:49 EST 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=2, name='liddffd', articleCount=null}, BaseArticleVo{articleId=10004, status=1, title='Spring boot', description='rerwerwer', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='Tue Oct 12 15:58:26 EDT 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10003, status=0, title='dd', description='test', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:57:33 EDT 2021', updateDate='Tue Oct 12 15:57:33 EDT 2021'}}]}
2021-11-08 09:10:48:717 [http-nio-8081-exec-9] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 3ms GET URI=/api/admin/category, methodName=com.ivan.sunnyblog.web.controller.CategoryContoller.getCategoryList, args=[SearchVo{page=1, limit=10, categoryId=null}], result=ResultInfo{info='null', status=0, data=[Category (1, Life ), Category (2, liddffd)]}
2021-11-08 09:10:53:218 [http-nio-8081-exec-10] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 6ms GET URI=/api/admin/article, methodName=com.ivan.sunnyblog.web.controller.ArticleController.getArticleList, args=[SearchVo{page=1, limit=20, categoryId=null}], result=ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10005, status=1, title='dd', description='test
sd
f
fdfsdfs', content='null', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Sun Nov 07 20:21:49 EST 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=2, name='liddffd', articleCount=null}, BaseArticleVo{articleId=10004, status=1, title='Spring boot', description='rerwerwer', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='Tue Oct 12 15:58:26 EDT 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10003, status=0, title='dd', description='test', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:57:33 EDT 2021', updateDate='Tue Oct 12 15:57:33 EDT 2021'}}]}
2021-11-08 09:10:55:677 [http-nio-8081-exec-4] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 1ms GET URI=/api/admin/category, methodName=com.ivan.sunnyblog.web.controller.CategoryContoller.getCategoryList, args=[SearchVo{page=1, limit=10, categoryId=null}], result=ResultInfo{info='null', status=0, data=[Category (1, Life ), Category (2, liddffd)]}
2021-11-08 09:10:55:680 [http-nio-8081-exec-1] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 2ms GET URI=/api/admin/article/10005, methodName=com.ivan.sunnyblog.web.controller.ArticleController.getArticleDetail, args=[10005], result=ResultInfo{info='null', status=0, data=ArticleDetailVo{categoryId=1, BaseArticleVo{articleId=10005, status=1, title='dd', description='test
sd
f
fdfsdfs', content='| Head | Head | Head | Head |
| --- | --- | --- | --- |
| Data | Data | Data | Data |
| Data | Data | Data | Data |

## 手把手教你写一个markdown编辑器

> 笔者在18年年末的时候接到一个开发任务——搭建一个AI项目的开放平台，其中的产品文档为转化为HTML格式的markdown文档。考虑到文档的即时更新，将文档信息做成了Ajax接口的形式。因此管理后台只需将textarea表单的内容通过markdown解析器进行HTML格式转化，然后将markdown内容和经转化的HTML文档都保存到数据库即可。
> 基本需求完成后，为了更好的用户体验，考虑将常用的编辑功能添加进来。改进版不仅支持了常用的文本编辑功能，还实现的UI界面的配置化，自定义语法解析器。本着造福伸手党的目的，以及积累些开源经验，笔者将该react 组件 [react-markdown-editor-lite](https://github.com/HarryChen0506/react-markdown-editor-lite) 进行了封装改造，并且发布到了开源社区。

### 预览
在线体验 [https://harrychen0506.github.io/react-markdown-editor-lite/](https://harrychen0506.github.io/react-markdown-editor-lite/)

![image](https://github.com//HarryChen0506/react-markdown-editor-lite/blob/master/image/react-markdown-editor-lite-v1.0.0.PNG?raw=true)

### 特点
* 轻量、基于React
* UI可配置, 如只显示编辑区或预览区
* 支持自定义markdown语法解析器,语法高亮等
* 支持常用的markdown编辑功能，如加粗，斜体等等...
* 支持功能按钮插拔化，用户可以自定义扩展组件
* 支持编辑区和预览区同步滚动

### 开发心得

- 文本编辑

  大多数常见的编辑器，包括富文本编辑器，利用了某些元素如div的contenteditable属性，配合selection、range、execCommand等API，实现了富文本编辑功能。这里面的实现比较复杂，所以有了"[为什么都说富文本编辑器是天坑？](https://www.zhihu.com/question/38699645)"这个说法。

  而markdown编辑器，核心的处理内容为简单语法的纯文本，复杂度相对来说比较低，并且input标签自带onSelect事件，可以很方便的获取选择信息（选择起始位置和选择文本值），因此要想实现编辑功能，只需将要改动的内容进行文本转换，然后进行重新拼接首尾，大功告成。
  
- markdown解析

  考察了几个社区流行的markdown解析器，比较流行的有[markdown](https://www.npmjs.com/package/markdown), [markdown-it](https://www.npmjs.com/package/markdown-it), [marked](https://www.npmjs.com/package/marked) 等等。综合考虑扩展性以及稳定性，笔者推荐使用markdown-it作为markdown的词法解析器，因为该解析器有比较多的插件，并且支持语法高亮。

- 同步滚动

  当选择分栏编辑的时候，滚动左侧的编辑区，右侧的预览区能自动滚动到对应的区域。方案参考了《[手把手教你用 100行代码实现基于 react的 markdown 输入 + 即时预览在线编辑器（一）](https://github.com/accforgit/blog-data/blob/master/%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91%E5%99%A8/README/README1.md)》。只需先计算出输入框容器元素与预览框容器元素之间最大scroll范围的比例值，然后根据主动滚动元素自身的scrollTop做相应的比例换算，即可知道对方区域的scrollTop值。

- 关于UI
 
  - 项目的字体库选择了Font Awesome风格，并且只选取了项目所需要的一些图标。
  - 编辑器的整体css均可通过全局覆盖的形式进行自定义。目前暂时只支持灰色主题。
  - 编辑器的显示区域包括菜单栏，编辑器，预览区，工具栏，通过配置组件的config属性，可以选择默认的展示区域。
  
### Install

```
npm install react-markdown-editor-lite --save
```

### Props

| Property | Description | Type | default | Remarks |
| --- | --- | --- | --- | --- |
| value | markdown content | String | '' | required |
| style | component container style | Object | {height: '100%'} | not required |
| config | component config | Object | {view: {...}, logger: {...}} | not required |
| onChange | emitting when editor has changed | Function | ({html, md}) => {} | not required |
| onImageUpload | when image uploaded, callback emitting will get image markdown text | (file: File, callback: (url: string) => void) => void; | ({file, callback}) => {} | not required |
| renderHTML | Render markdown text to HTML. You can return either string, function or Promise | (text: string) => string|function|Promise | none | **required** |

### Example

``` js
'use strict';
import React from 'react'
import ReactDOM from 'react-dom'
import MdEditor from 'react-markdown-editor-lite'
import MarkdownIt from 'markdown-it'
import emoji from 'markdown-it-emoji'
import subscript from 'markdown-it-sub'
import superscript from 'markdown-it-sup'
import footnote from 'markdown-it-footnote'
import deflist from 'markdown-it-deflist'
import abbreviation from 'markdown-it-abbr'
import insert from 'markdown-it-ins'
import mark from 'markdown-it-mark'
import tasklists from 'markdown-it-task-lists'
import hljs from 'highlight.js'
import 'highlight.js/styles/atom-one-light.css'
// import 'highlight.js/styles/github.css'
import './index.less';

const MOCK_DATA = "I Love React."
export default class Demo extends React.Component {
  mdEditor = null
  mdParser = null
  constructor(props) {
    super(props)
    // initial a parsera
    this.mdParser = new MarkdownIt({
      html: true,
      linkify: true,
      typographer: true,
      highlight: function (str, lang) {
        if (lang && hljs.getLanguage(lang)) {
          try {
            return hljs.highlight(lang, str).value
          } catch (__) {}
        }    
        return '' // use external default escaping
      }
    })
    .use(emoji)
    .use(subscript)
    .use(superscript)
    .use(footnote)
    .use(deflist)
    .use(abbreviation)
    .use(insert)
    .use(mark)
    .use(tasklists, { enabled: this.taskLists })
    this.renderHTML = this.renderHTML.bind(this)
  }
  handleEditorChange({html, md}) {
    console.log('handleEditorChange', html, md)
  }
  handleImageUpload(file, callback) {
    const reader = new FileReader()
    reader.onload = () => {      
      const convertBase64UrlToBlob = (urlData) => {  
        let arr = urlData.split(','), mime = arr[0].match(/:(.*?);/)[1]
        let bstr = atob(arr[1])
        let n = bstr.length
        let u8arr = new Uint8Array(n)
        while (n--) {
          u8arr[n] = bstr.charCodeAt(n)
        }
        return new Blob([u8arr], {type:mime})
      }
      const blob = convertBase64UrlToBlob(reader.result)
      setTimeout(() => {
        // setTimeout 模拟异步上传图片
        // 当异步上传获取图片地址后，执行calback回调（参数为imageUrl字符串），即可将图片地址写入markdown
        callback('https://avatars0.githubusercontent.com/u/21263805?s=40&v=4')
      }, 1000)
    }
    reader.readAsDataURL(file)
  }
  renderHTML(text) {
    // 模拟异步渲染Markdown
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve(this.mdParser.render(text))
      }, 1000)
    })
  }
  handleGetMdValue = () => {   
    this.mdEditor && alert(this.mdEditor.getMdValue())      
  }
  handleGetHtmlValue = () => {    
    this.mdEditor && alert(this.mdEditor.getHtmlValue())
  }
  render() {
    return (      
      <div>
        <nav>
          <button onClick={this.handleGetMdValue} >getMdValue</button>  
          <button onClick={this.handleGetHtmlValue} >getHtmlValue</button>  
        </nav>
        <section style="height: 500px">
          <MdEditor 
            ref={node => this.mdEditor = node}
            value={MOCK_DATA}
            style={{height: '400px'}}
            renderHTML={this.renderHTML}
            config={{
              view: {
                menu: true,
                md: true,
                html: true
              },
              imageUrl: 'https://octodex.github.com/images/minion.png'
            }}
            onChange={this.handleEditorChange} 
            onImageUpload={this.handleImageUpload}
          />
        </section>                        
      </div>      
    )
  }
}
```

### 最后

   欢迎大家使用和反馈，[项目地址](https://github.com/HarryChen0506/react-markdown-editor-lite) (https://github.com/HarryChen0506/react-markdown-editor-lite)， 你的点赞将是我莫大的动力😊

', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Sun Nov 07 20:21:49 EST 2021'}}}
2021-11-08 09:12:50:807 [http-nio-8081-exec-8] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 5ms GET URI=/api/admin/article/10005, methodName=com.ivan.sunnyblog.web.controller.ArticleController.getArticleDetail, args=[10005], result=ResultInfo{info='null', status=0, data=ArticleDetailVo{categoryId=1, BaseArticleVo{articleId=10005, status=1, title='dd', description='test
sd
f
fdfsdfs', content='| Head | Head | Head | Head |
| --- | --- | --- | --- |
| Data | Data | Data | Data |
| Data | Data | Data | Data |

## 手把手教你写一个markdown编辑器

> 笔者在18年年末的时候接到一个开发任务——搭建一个AI项目的开放平台，其中的产品文档为转化为HTML格式的markdown文档。考虑到文档的即时更新，将文档信息做成了Ajax接口的形式。因此管理后台只需将textarea表单的内容通过markdown解析器进行HTML格式转化，然后将markdown内容和经转化的HTML文档都保存到数据库即可。
> 基本需求完成后，为了更好的用户体验，考虑将常用的编辑功能添加进来。改进版不仅支持了常用的文本编辑功能，还实现的UI界面的配置化，自定义语法解析器。本着造福伸手党的目的，以及积累些开源经验，笔者将该react 组件 [react-markdown-editor-lite](https://github.com/HarryChen0506/react-markdown-editor-lite) 进行了封装改造，并且发布到了开源社区。

### 预览
在线体验 [https://harrychen0506.github.io/react-markdown-editor-lite/](https://harrychen0506.github.io/react-markdown-editor-lite/)

![image](https://github.com//HarryChen0506/react-markdown-editor-lite/blob/master/image/react-markdown-editor-lite-v1.0.0.PNG?raw=true)

### 特点
* 轻量、基于React
* UI可配置, 如只显示编辑区或预览区
* 支持自定义markdown语法解析器,语法高亮等
* 支持常用的markdown编辑功能，如加粗，斜体等等...
* 支持功能按钮插拔化，用户可以自定义扩展组件
* 支持编辑区和预览区同步滚动

### 开发心得

- 文本编辑

  大多数常见的编辑器，包括富文本编辑器，利用了某些元素如div的contenteditable属性，配合selection、range、execCommand等API，实现了富文本编辑功能。这里面的实现比较复杂，所以有了"[为什么都说富文本编辑器是天坑？](https://www.zhihu.com/question/38699645)"这个说法。

  而markdown编辑器，核心的处理内容为简单语法的纯文本，复杂度相对来说比较低，并且input标签自带onSelect事件，可以很方便的获取选择信息（选择起始位置和选择文本值），因此要想实现编辑功能，只需将要改动的内容进行文本转换，然后进行重新拼接首尾，大功告成。
  
- markdown解析

  考察了几个社区流行的markdown解析器，比较流行的有[markdown](https://www.npmjs.com/package/markdown), [markdown-it](https://www.npmjs.com/package/markdown-it), [marked](https://www.npmjs.com/package/marked) 等等。综合考虑扩展性以及稳定性，笔者推荐使用markdown-it作为markdown的词法解析器，因为该解析器有比较多的插件，并且支持语法高亮。

- 同步滚动

  当选择分栏编辑的时候，滚动左侧的编辑区，右侧的预览区能自动滚动到对应的区域。方案参考了《[手把手教你用 100行代码实现基于 react的 markdown 输入 + 即时预览在线编辑器（一）](https://github.com/accforgit/blog-data/blob/master/%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91%E5%99%A8/README/README1.md)》。只需先计算出输入框容器元素与预览框容器元素之间最大scroll范围的比例值，然后根据主动滚动元素自身的scrollTop做相应的比例换算，即可知道对方区域的scrollTop值。

- 关于UI
 
  - 项目的字体库选择了Font Awesome风格，并且只选取了项目所需要的一些图标。
  - 编辑器的整体css均可通过全局覆盖的形式进行自定义。目前暂时只支持灰色主题。
  - 编辑器的显示区域包括菜单栏，编辑器，预览区，工具栏，通过配置组件的config属性，可以选择默认的展示区域。
  
### Install

```
npm install react-markdown-editor-lite --save
```

### Props

| Property | Description | Type | default | Remarks |
| --- | --- | --- | --- | --- |
| value | markdown content | String | '' | required |
| style | component container style | Object | {height: '100%'} | not required |
| config | component config | Object | {view: {...}, logger: {...}} | not required |
| onChange | emitting when editor has changed | Function | ({html, md}) => {} | not required |
| onImageUpload | when image uploaded, callback emitting will get image markdown text | (file: File, callback: (url: string) => void) => void; | ({file, callback}) => {} | not required |
| renderHTML | Render markdown text to HTML. You can return either string, function or Promise | (text: string) => string|function|Promise | none | **required** |

### Example

``` js
'use strict';
import React from 'react'
import ReactDOM from 'react-dom'
import MdEditor from 'react-markdown-editor-lite'
import MarkdownIt from 'markdown-it'
import emoji from 'markdown-it-emoji'
import subscript from 'markdown-it-sub'
import superscript from 'markdown-it-sup'
import footnote from 'markdown-it-footnote'
import deflist from 'markdown-it-deflist'
import abbreviation from 'markdown-it-abbr'
import insert from 'markdown-it-ins'
import mark from 'markdown-it-mark'
import tasklists from 'markdown-it-task-lists'
import hljs from 'highlight.js'
import 'highlight.js/styles/atom-one-light.css'
// import 'highlight.js/styles/github.css'
import './index.less';

const MOCK_DATA = "I Love React."
export default class Demo extends React.Component {
  mdEditor = null
  mdParser = null
  constructor(props) {
    super(props)
    // initial a parsera
    this.mdParser = new MarkdownIt({
      html: true,
      linkify: true,
      typographer: true,
      highlight: function (str, lang) {
        if (lang && hljs.getLanguage(lang)) {
          try {
            return hljs.highlight(lang, str).value
          } catch (__) {}
        }    
        return '' // use external default escaping
      }
    })
    .use(emoji)
    .use(subscript)
    .use(superscript)
    .use(footnote)
    .use(deflist)
    .use(abbreviation)
    .use(insert)
    .use(mark)
    .use(tasklists, { enabled: this.taskLists })
    this.renderHTML = this.renderHTML.bind(this)
  }
  handleEditorChange({html, md}) {
    console.log('handleEditorChange', html, md)
  }
  handleImageUpload(file, callback) {
    const reader = new FileReader()
    reader.onload = () => {      
      const convertBase64UrlToBlob = (urlData) => {  
        let arr = urlData.split(','), mime = arr[0].match(/:(.*?);/)[1]
        let bstr = atob(arr[1])
        let n = bstr.length
        let u8arr = new Uint8Array(n)
        while (n--) {
          u8arr[n] = bstr.charCodeAt(n)
        }
        return new Blob([u8arr], {type:mime})
      }
      const blob = convertBase64UrlToBlob(reader.result)
      setTimeout(() => {
        // setTimeout 模拟异步上传图片
        // 当异步上传获取图片地址后，执行calback回调（参数为imageUrl字符串），即可将图片地址写入markdown
        callback('https://avatars0.githubusercontent.com/u/21263805?s=40&v=4')
      }, 1000)
    }
    reader.readAsDataURL(file)
  }
  renderHTML(text) {
    // 模拟异步渲染Markdown
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve(this.mdParser.render(text))
      }, 1000)
    })
  }
  handleGetMdValue = () => {   
    this.mdEditor && alert(this.mdEditor.getMdValue())      
  }
  handleGetHtmlValue = () => {    
    this.mdEditor && alert(this.mdEditor.getHtmlValue())
  }
  render() {
    return (      
      <div>
        <nav>
          <button onClick={this.handleGetMdValue} >getMdValue</button>  
          <button onClick={this.handleGetHtmlValue} >getHtmlValue</button>  
        </nav>
        <section style="height: 500px">
          <MdEditor 
            ref={node => this.mdEditor = node}
            value={MOCK_DATA}
            style={{height: '400px'}}
            renderHTML={this.renderHTML}
            config={{
              view: {
                menu: true,
                md: true,
                html: true
              },
              imageUrl: 'https://octodex.github.com/images/minion.png'
            }}
            onChange={this.handleEditorChange} 
            onImageUpload={this.handleImageUpload}
          />
        </section>                        
      </div>      
    )
  }
}
```

### 最后

   欢迎大家使用和反馈，[项目地址](https://github.com/HarryChen0506/react-markdown-editor-lite) (https://github.com/HarryChen0506/react-markdown-editor-lite)， 你的点赞将是我莫大的动力😊

', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Sun Nov 07 20:21:49 EST 2021'}}}
2021-11-08 09:12:50:861 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 56ms GET URI=/api/admin/category, methodName=com.ivan.sunnyblog.web.controller.CategoryContoller.getCategoryList, args=[SearchVo{page=1, limit=10, categoryId=null}], result=ResultInfo{info='null', status=0, data=[Category (1, Life ), Category (2, liddffd)]}
2021-11-08 09:13:30:236 [http-nio-8081-exec-9] INFO  com.ivan.sunnyblog.base.utils.BaseLogger updateing article
2021-11-08 09:13:30:260 [http-nio-8081-exec-9] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 33ms POST URI=/api/admin/article, methodName=com.ivan.sunnyblog.web.controller.ArticleController.editArticle, args=[ArticleDetailVo{categoryId=1, BaseArticleVo{articleId=10005, status=1, title='dd', description='test
sd
f
fdfsdfs', content='| Head | Head | Head | Head |
| --- | --- | --- | --- |
| Data | Data | Data | Data |
| Data | Data | Data | Data |

## 手把手教你写一个markdown编辑器

> 笔者在18年年末的时候接到一个开发任务——搭建一个AI项目的开放平台，其中的产品文档为转化为HTML格式的markdown文档。考虑到文档的即时更新，将文档信息做成了Ajax接口的形式。因此管理后台只需将textarea表单的内容通过markdown解析器进行HTML格式转化，然后将markdown内容和经转化的HTML文档都保存到数据库即可。
> 基本需求完成后，为了更好的用户体验，考虑将常用的编辑功能添加进来。改进版不仅支持了常用的文本编辑功能，还实现的UI界面的配置化，自定义语法解析器。本着造福伸手党的目的，以及积累些开源经验，笔者将该react 组件 [react-markdown-editor-lite](https://github.com/HarryChen0506/react-markdown-editor-lite) 进行了封装改造，并且发布到了开源社区。

### 预览
在线体验 [https://harrychen0506.github.io/react-markdown-editor-lite/](https://harrychen0506.github.io/react-markdown-editor-lite/)

![image](https://github.com//HarryChen0506/react-markdown-editor-lite/blob/master/image/react-markdown-editor-lite-v1.0.0.PNG?raw=true)

### 特点
* 轻量、基于React
* UI可配置, 如只显示编辑区或预览区
* 支持自定义markdown语法解析器,语法高亮等
* 支持常用的markdown编辑功能，如加粗，斜体等等...
* 支持功能按钮插拔化，用户可以自定义扩展组件
* 支持编辑区和预览区同步滚动

### 开发心得

- 文本编辑

  大多数常见的编辑器，包括富文本编辑器，利用了某些元素如div的contenteditable属性，配合selection、range、execCommand等API，实现了富文本编辑功能。这里面的实现比较复杂，所以有了"[为什么都说富文本编辑器是天坑？](https://www.zhihu.com/question/38699645)"这个说法。

  而markdown编辑器，核心的处理内容为简单语法的纯文本，复杂度相对来说比较低，并且input标签自带onSelect事件，可以很方便的获取选择信息（选择起始位置和选择文本值），因此要想实现编辑功能，只需将要改动的内容进行文本转换，然后进行重新拼接首尾，大功告成。
  
- markdown解析

  考察了几个社区流行的markdown解析器，比较流行的有[markdown](https://www.npmjs.com/package/markdown), [markdown-it](https://www.npmjs.com/package/markdown-it), [marked](https://www.npmjs.com/package/marked) 等等。综合考虑扩展性以及稳定性，笔者推荐使用markdown-it作为markdown的词法解析器，因为该解析器有比较多的插件，并且支持语法高亮。

- 同步滚动

  当选择分栏编辑的时候，滚动左侧的编辑区，右侧的预览区能自动滚动到对应的区域。方案参考了《[手把手教你用 100行代码实现基于 react的 markdown 输入 + 即时预览在线编辑器（一）](https://github.com/accforgit/blog-data/blob/master/%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91%E5%99%A8/README/README1.md)》。只需先计算出输入框容器元素与预览框容器元素之间最大scroll范围的比例值，然后根据主动滚动元素自身的scrollTop做相应的比例换算，即可知道对方区域的scrollTop值。

- 关于UI
 
  - 项目的字体库选择了Font Awesome风格，并且只选取了项目所需要的一些图标。
  - 编辑器的整体css均可通过全局覆盖的形式进行自定义。目前暂时只支持灰色主题。
  - 编辑器的显示区域包括菜单栏，编辑器，预览区，工具栏，通过配置组件的config属性，可以选择默认的展示区域。
  
### Install

```js
npm install react-markdown-editor-lite --save
```

### Props

| Property | Description | Type | default | Remarks |
| --- | --- | --- | --- | --- |
| value | markdown content | String | '' | required |
| style | component container style | Object | {height: '100%'} | not required |
| config | component config | Object | {view: {...}, logger: {...}} | not required |
| onChange | emitting when editor has changed | Function | ({html, md}) => {} | not required |
| onImageUpload | when image uploaded, callback emitting will get image markdown text | (file: File, callback: (url: string) => void) => void; | ({file, callback}) => {} | not required |
| renderHTML | Render markdown text to HTML. You can return either string, function or Promise | (text: string) => string|function|Promise | none | **required** |

### Example

``` js
'use strict';
import React from 'react'
import ReactDOM from 'react-dom'
import MdEditor from 'react-markdown-editor-lite'
import MarkdownIt from 'markdown-it'
import emoji from 'markdown-it-emoji'
import subscript from 'markdown-it-sub'
import superscript from 'markdown-it-sup'
import footnote from 'markdown-it-footnote'
import deflist from 'markdown-it-deflist'
import abbreviation from 'markdown-it-abbr'
import insert from 'markdown-it-ins'
import mark from 'markdown-it-mark'
import tasklists from 'markdown-it-task-lists'
import hljs from 'highlight.js'
import 'highlight.js/styles/atom-one-light.css'
// import 'highlight.js/styles/github.css'
import './index.less';

const MOCK_DATA = "I Love React."
export default class Demo extends React.Component {
  mdEditor = null
  mdParser = null
  constructor(props) {
    super(props)
    // initial a parsera
    this.mdParser = new MarkdownIt({
      html: true,
      linkify: true,
      typographer: true,
      highlight: function (str, lang) {
        if (lang && hljs.getLanguage(lang)) {
          try {
            return hljs.highlight(lang, str).value
          } catch (__) {}
        }    
        return '' // use external default escaping
      }
    })
    .use(emoji)
    .use(subscript)
    .use(superscript)
    .use(footnote)
    .use(deflist)
    .use(abbreviation)
    .use(insert)
    .use(mark)
    .use(tasklists, { enabled: this.taskLists })
    this.renderHTML = this.renderHTML.bind(this)
  }
  handleEditorChange({html, md}) {
    console.log('handleEditorChange', html, md)
  }
  handleImageUpload(file, callback) {
    const reader = new FileReader()
    reader.onload = () => {      
      const convertBase64UrlToBlob = (urlData) => {  
        let arr = urlData.split(','), mime = arr[0].match(/:(.*?);/)[1]
        let bstr = atob(arr[1])
        let n = bstr.length
        let u8arr = new Uint8Array(n)
        while (n--) {
          u8arr[n] = bstr.charCodeAt(n)
        }
        return new Blob([u8arr], {type:mime})
      }
      const blob = convertBase64UrlToBlob(reader.result)
      setTimeout(() => {
        // setTimeout 模拟异步上传图片
        // 当异步上传获取图片地址后，执行calback回调（参数为imageUrl字符串），即可将图片地址写入markdown
        callback('https://avatars0.githubusercontent.com/u/21263805?s=40&v=4')
      }, 1000)
    }
    reader.readAsDataURL(file)
  }
  renderHTML(text) {
    // 模拟异步渲染Markdown
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve(this.mdParser.render(text))
      }, 1000)
    })
  }
  handleGetMdValue = () => {   
    this.mdEditor && alert(this.mdEditor.getMdValue())      
  }
  handleGetHtmlValue = () => {    
    this.mdEditor && alert(this.mdEditor.getHtmlValue())
  }
  render() {
    return (      
      <div>
        <nav>
          <button onClick={this.handleGetMdValue} >getMdValue</button>  
          <button onClick={this.handleGetHtmlValue} >getHtmlValue</button>  
        </nav>
        <section style="height: 500px">
          <MdEditor 
            ref={node => this.mdEditor = node}
            value={MOCK_DATA}
            style={{height: '400px'}}
            renderHTML={this.renderHTML}
            config={{
              view: {
                menu: true,
                md: true,
                html: true
              },
              imageUrl: 'https://octodex.github.com/images/minion.png'
            }}
            onChange={this.handleEditorChange} 
            onImageUpload={this.handleImageUpload}
          />
        </section>                        
      </div>      
    )
  }
}
```

### 最后

   欢迎大家使用和反馈，[项目地址](https://github.com/HarryChen0506/react-markdown-editor-lite) (https://github.com/HarryChen0506/react-markdown-editor-lite)， 你的点赞将是我莫大的动力😊

', firstPicture='', viewCount=null, createDate='null', updateDate='null'}}], result=ResultInfo{info='null', status=0, data=null}
2021-11-08 09:14:11:685 [http-nio-8081-exec-2] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 12ms GET URI=/api/admin/article, methodName=com.ivan.sunnyblog.web.controller.ArticleController.getArticleList, args=[SearchVo{page=1, limit=20, categoryId=null}], result=ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10005, status=1, title='dd', description='test
sd
f
fdfsdfs', content='null', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Mon Nov 08 09:13:30 EST 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=2, name='liddffd', articleCount=null}, BaseArticleVo{articleId=10004, status=1, title='Spring boot', description='rerwerwer', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='Tue Oct 12 15:58:26 EDT 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10003, status=0, title='dd', description='test', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:57:33 EDT 2021', updateDate='Tue Oct 12 15:57:33 EDT 2021'}}]}
2021-11-08 09:14:13:190 [http-nio-8081-exec-4] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 1ms GET URI=/api/admin/category, methodName=com.ivan.sunnyblog.web.controller.CategoryContoller.getCategoryList, args=[SearchVo{page=1, limit=10, categoryId=null}], result=ResultInfo{info='null', status=0, data=[Category (1, Life ), Category (2, liddffd)]}
2021-11-08 09:14:16:991 [http-nio-8081-exec-1] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 5ms GET URI=/api/admin/article, methodName=com.ivan.sunnyblog.web.controller.ArticleController.getArticleList, args=[SearchVo{page=1, limit=20, categoryId=null}], result=ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10005, status=1, title='dd', description='test
sd
f
fdfsdfs', content='null', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Mon Nov 08 09:13:30 EST 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=2, name='liddffd', articleCount=null}, BaseArticleVo{articleId=10004, status=1, title='Spring boot', description='rerwerwer', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='Tue Oct 12 15:58:26 EDT 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10003, status=0, title='dd', description='test', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:57:33 EDT 2021', updateDate='Tue Oct 12 15:57:33 EDT 2021'}}]}
2021-11-08 09:14:20:318 [http-nio-8081-exec-5] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 5ms GET URI=/api/admin/article/10005, methodName=com.ivan.sunnyblog.web.controller.ArticleController.getArticleDetail, args=[10005], result=ResultInfo{info='null', status=0, data=ArticleDetailVo{categoryId=1, BaseArticleVo{articleId=10005, status=1, title='dd', description='test
sd
f
fdfsdfs', content='| Head | Head | Head | Head |
| --- | --- | --- | --- |
| Data | Data | Data | Data |
| Data | Data | Data | Data |

## 手把手教你写一个markdown编辑器

> 笔者在18年年末的时候接到一个开发任务——搭建一个AI项目的开放平台，其中的产品文档为转化为HTML格式的markdown文档。考虑到文档的即时更新，将文档信息做成了Ajax接口的形式。因此管理后台只需将textarea表单的内容通过markdown解析器进行HTML格式转化，然后将markdown内容和经转化的HTML文档都保存到数据库即可。
> 基本需求完成后，为了更好的用户体验，考虑将常用的编辑功能添加进来。改进版不仅支持了常用的文本编辑功能，还实现的UI界面的配置化，自定义语法解析器。本着造福伸手党的目的，以及积累些开源经验，笔者将该react 组件 [react-markdown-editor-lite](https://github.com/HarryChen0506/react-markdown-editor-lite) 进行了封装改造，并且发布到了开源社区。

### 预览
在线体验 [https://harrychen0506.github.io/react-markdown-editor-lite/](https://harrychen0506.github.io/react-markdown-editor-lite/)

![image](https://github.com//HarryChen0506/react-markdown-editor-lite/blob/master/image/react-markdown-editor-lite-v1.0.0.PNG?raw=true)

### 特点
* 轻量、基于React
* UI可配置, 如只显示编辑区或预览区
* 支持自定义markdown语法解析器,语法高亮等
* 支持常用的markdown编辑功能，如加粗，斜体等等...
* 支持功能按钮插拔化，用户可以自定义扩展组件
* 支持编辑区和预览区同步滚动

### 开发心得

- 文本编辑

  大多数常见的编辑器，包括富文本编辑器，利用了某些元素如div的contenteditable属性，配合selection、range、execCommand等API，实现了富文本编辑功能。这里面的实现比较复杂，所以有了"[为什么都说富文本编辑器是天坑？](https://www.zhihu.com/question/38699645)"这个说法。

  而markdown编辑器，核心的处理内容为简单语法的纯文本，复杂度相对来说比较低，并且input标签自带onSelect事件，可以很方便的获取选择信息（选择起始位置和选择文本值），因此要想实现编辑功能，只需将要改动的内容进行文本转换，然后进行重新拼接首尾，大功告成。
  
- markdown解析

  考察了几个社区流行的markdown解析器，比较流行的有[markdown](https://www.npmjs.com/package/markdown), [markdown-it](https://www.npmjs.com/package/markdown-it), [marked](https://www.npmjs.com/package/marked) 等等。综合考虑扩展性以及稳定性，笔者推荐使用markdown-it作为markdown的词法解析器，因为该解析器有比较多的插件，并且支持语法高亮。

- 同步滚动

  当选择分栏编辑的时候，滚动左侧的编辑区，右侧的预览区能自动滚动到对应的区域。方案参考了《[手把手教你用 100行代码实现基于 react的 markdown 输入 + 即时预览在线编辑器（一）](https://github.com/accforgit/blog-data/blob/master/%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91%E5%99%A8/README/README1.md)》。只需先计算出输入框容器元素与预览框容器元素之间最大scroll范围的比例值，然后根据主动滚动元素自身的scrollTop做相应的比例换算，即可知道对方区域的scrollTop值。

- 关于UI
 
  - 项目的字体库选择了Font Awesome风格，并且只选取了项目所需要的一些图标。
  - 编辑器的整体css均可通过全局覆盖的形式进行自定义。目前暂时只支持灰色主题。
  - 编辑器的显示区域包括菜单栏，编辑器，预览区，工具栏，通过配置组件的config属性，可以选择默认的展示区域。
  
### Install

```js
npm install react-markdown-editor-lite --save
```

### Props

| Property | Description | Type | default | Remarks |
| --- | --- | --- | --- | --- |
| value | markdown content | String | '' | required |
| style | component container style | Object | {height: '100%'} | not required |
| config | component config | Object | {view: {...}, logger: {...}} | not required |
| onChange | emitting when editor has changed | Function | ({html, md}) => {} | not required |
| onImageUpload | when image uploaded, callback emitting will get image markdown text | (file: File, callback: (url: string) => void) => void; | ({file, callback}) => {} | not required |
| renderHTML | Render markdown text to HTML. You can return either string, function or Promise | (text: string) => string|function|Promise | none | **required** |

### Example

``` js
'use strict';
import React from 'react'
import ReactDOM from 'react-dom'
import MdEditor from 'react-markdown-editor-lite'
import MarkdownIt from 'markdown-it'
import emoji from 'markdown-it-emoji'
import subscript from 'markdown-it-sub'
import superscript from 'markdown-it-sup'
import footnote from 'markdown-it-footnote'
import deflist from 'markdown-it-deflist'
import abbreviation from 'markdown-it-abbr'
import insert from 'markdown-it-ins'
import mark from 'markdown-it-mark'
import tasklists from 'markdown-it-task-lists'
import hljs from 'highlight.js'
import 'highlight.js/styles/atom-one-light.css'
// import 'highlight.js/styles/github.css'
import './index.less';

const MOCK_DATA = "I Love React."
export default class Demo extends React.Component {
  mdEditor = null
  mdParser = null
  constructor(props) {
    super(props)
    // initial a parsera
    this.mdParser = new MarkdownIt({
      html: true,
      linkify: true,
      typographer: true,
      highlight: function (str, lang) {
        if (lang && hljs.getLanguage(lang)) {
          try {
            return hljs.highlight(lang, str).value
          } catch (__) {}
        }    
        return '' // use external default escaping
      }
    })
    .use(emoji)
    .use(subscript)
    .use(superscript)
    .use(footnote)
    .use(deflist)
    .use(abbreviation)
    .use(insert)
    .use(mark)
    .use(tasklists, { enabled: this.taskLists })
    this.renderHTML = this.renderHTML.bind(this)
  }
  handleEditorChange({html, md}) {
    console.log('handleEditorChange', html, md)
  }
  handleImageUpload(file, callback) {
    const reader = new FileReader()
    reader.onload = () => {      
      const convertBase64UrlToBlob = (urlData) => {  
        let arr = urlData.split(','), mime = arr[0].match(/:(.*?);/)[1]
        let bstr = atob(arr[1])
        let n = bstr.length
        let u8arr = new Uint8Array(n)
        while (n--) {
          u8arr[n] = bstr.charCodeAt(n)
        }
        return new Blob([u8arr], {type:mime})
      }
      const blob = convertBase64UrlToBlob(reader.result)
      setTimeout(() => {
        // setTimeout 模拟异步上传图片
        // 当异步上传获取图片地址后，执行calback回调（参数为imageUrl字符串），即可将图片地址写入markdown
        callback('https://avatars0.githubusercontent.com/u/21263805?s=40&v=4')
      }, 1000)
    }
    reader.readAsDataURL(file)
  }
  renderHTML(text) {
    // 模拟异步渲染Markdown
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve(this.mdParser.render(text))
      }, 1000)
    })
  }
  handleGetMdValue = () => {   
    this.mdEditor && alert(this.mdEditor.getMdValue())      
  }
  handleGetHtmlValue = () => {    
    this.mdEditor && alert(this.mdEditor.getHtmlValue())
  }
  render() {
    return (      
      <div>
        <nav>
          <button onClick={this.handleGetMdValue} >getMdValue</button>  
          <button onClick={this.handleGetHtmlValue} >getHtmlValue</button>  
        </nav>
        <section style="height: 500px">
          <MdEditor 
            ref={node => this.mdEditor = node}
            value={MOCK_DATA}
            style={{height: '400px'}}
            renderHTML={this.renderHTML}
            config={{
              view: {
                menu: true,
                md: true,
                html: true
              },
              imageUrl: 'https://octodex.github.com/images/minion.png'
            }}
            onChange={this.handleEditorChange} 
            onImageUpload={this.handleImageUpload}
          />
        </section>                        
      </div>      
    )
  }
}
```

### 最后

   欢迎大家使用和反馈，[项目地址](https://github.com/HarryChen0506/react-markdown-editor-lite) (https://github.com/HarryChen0506/react-markdown-editor-lite)， 你的点赞将是我莫大的动力😊

', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Mon Nov 08 09:13:30 EST 2021'}}}
2021-11-08 09:14:20:341 [http-nio-8081-exec-3] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 26ms GET URI=/api/admin/category, methodName=com.ivan.sunnyblog.web.controller.CategoryContoller.getCategoryList, args=[SearchVo{page=1, limit=10, categoryId=null}], result=ResultInfo{info='null', status=0, data=[Category (1, Life ), Category (2, liddffd)]}
2021-11-08 09:15:09:734 [http-nio-8081-exec-8] INFO  com.ivan.sunnyblog.base.utils.BaseLogger updateing article
2021-11-08 09:15:09:743 [http-nio-8081-exec-8] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 10ms POST URI=/api/admin/article, methodName=com.ivan.sunnyblog.web.controller.ArticleController.editArticle, args=[ArticleDetailVo{categoryId=1, BaseArticleVo{articleId=10005, status=1, title='dd', description='This is the doc of React markdown editor lite.
Enjoy!!', content='| Head | Head | Head | Head |
| --- | --- | --- | --- |
| Data | Data | Data | Data |
| Data | Data | Data | Data |

## 手把手教你写一个markdown编辑器

> 笔者在18年年末的时候接到一个开发任务——搭建一个AI项目的开放平台，其中的产品文档为转化为HTML格式的markdown文档。考虑到文档的即时更新，将文档信息做成了Ajax接口的形式。因此管理后台只需将textarea表单的内容通过markdown解析器进行HTML格式转化，然后将markdown内容和经转化的HTML文档都保存到数据库即可。
> 基本需求完成后，为了更好的用户体验，考虑将常用的编辑功能添加进来。改进版不仅支持了常用的文本编辑功能，还实现的UI界面的配置化，自定义语法解析器。本着造福伸手党的目的，以及积累些开源经验，笔者将该react 组件 [react-markdown-editor-lite](https://github.com/HarryChen0506/react-markdown-editor-lite) 进行了封装改造，并且发布到了开源社区。

### 预览
在线体验 [https://harrychen0506.github.io/react-markdown-editor-lite/](https://harrychen0506.github.io/react-markdown-editor-lite/)

![image](https://github.com//HarryChen0506/react-markdown-editor-lite/blob/master/image/react-markdown-editor-lite-v1.0.0.PNG?raw=true)

### 特点
* 轻量、基于React
* UI可配置, 如只显示编辑区或预览区
* 支持自定义markdown语法解析器,语法高亮等
* 支持常用的markdown编辑功能，如加粗，斜体等等...
* 支持功能按钮插拔化，用户可以自定义扩展组件
* 支持编辑区和预览区同步滚动

### 开发心得

- 文本编辑

  大多数常见的编辑器，包括富文本编辑器，利用了某些元素如div的contenteditable属性，配合selection、range、execCommand等API，实现了富文本编辑功能。这里面的实现比较复杂，所以有了"[为什么都说富文本编辑器是天坑？](https://www.zhihu.com/question/38699645)"这个说法。

  而markdown编辑器，核心的处理内容为简单语法的纯文本，复杂度相对来说比较低，并且input标签自带onSelect事件，可以很方便的获取选择信息（选择起始位置和选择文本值），因此要想实现编辑功能，只需将要改动的内容进行文本转换，然后进行重新拼接首尾，大功告成。
  
- markdown解析

  考察了几个社区流行的markdown解析器，比较流行的有[markdown](https://www.npmjs.com/package/markdown), [markdown-it](https://www.npmjs.com/package/markdown-it), [marked](https://www.npmjs.com/package/marked) 等等。综合考虑扩展性以及稳定性，笔者推荐使用markdown-it作为markdown的词法解析器，因为该解析器有比较多的插件，并且支持语法高亮。

- 同步滚动

  当选择分栏编辑的时候，滚动左侧的编辑区，右侧的预览区能自动滚动到对应的区域。方案参考了《[手把手教你用 100行代码实现基于 react的 markdown 输入 + 即时预览在线编辑器（一）](https://github.com/accforgit/blog-data/blob/master/%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91%E5%99%A8/README/README1.md)》。只需先计算出输入框容器元素与预览框容器元素之间最大scroll范围的比例值，然后根据主动滚动元素自身的scrollTop做相应的比例换算，即可知道对方区域的scrollTop值。

- 关于UI
 
  - 项目的字体库选择了Font Awesome风格，并且只选取了项目所需要的一些图标。
  - 编辑器的整体css均可通过全局覆盖的形式进行自定义。目前暂时只支持灰色主题。
  - 编辑器的显示区域包括菜单栏，编辑器，预览区，工具栏，通过配置组件的config属性，可以选择默认的展示区域。
  
### Install

```js
npm install react-markdown-editor-lite --save
```

### Props

| Property | Description | Type | default | Remarks |
| --- | --- | --- | --- | --- |
| value | markdown content | String | '' | required |
| style | component container style | Object | {height: '100%'} | not required |
| config | component config | Object | {view: {...}, logger: {...}} | not required |
| onChange | emitting when editor has changed | Function | ({html, md}) => {} | not required |
| onImageUpload | when image uploaded, callback emitting will get image markdown text | (file: File, callback: (url: string) => void) => void; | ({file, callback}) => {} | not required |
| renderHTML | Render markdown text to HTML. You can return either string, function or Promise | (text: string) => string|function|Promise | none | **required** |

### Example

``` js
'use strict';
import React from 'react'
import ReactDOM from 'react-dom'
import MdEditor from 'react-markdown-editor-lite'
import MarkdownIt from 'markdown-it'
import emoji from 'markdown-it-emoji'
import subscript from 'markdown-it-sub'
import superscript from 'markdown-it-sup'
import footnote from 'markdown-it-footnote'
import deflist from 'markdown-it-deflist'
import abbreviation from 'markdown-it-abbr'
import insert from 'markdown-it-ins'
import mark from 'markdown-it-mark'
import tasklists from 'markdown-it-task-lists'
import hljs from 'highlight.js'
import 'highlight.js/styles/atom-one-light.css'
// import 'highlight.js/styles/github.css'
import './index.less';

const MOCK_DATA = "I Love React."
export default class Demo extends React.Component {
  mdEditor = null
  mdParser = null
  constructor(props) {
    super(props)
    // initial a parsera
    this.mdParser = new MarkdownIt({
      html: true,
      linkify: true,
      typographer: true,
      highlight: function (str, lang) {
        if (lang && hljs.getLanguage(lang)) {
          try {
            return hljs.highlight(lang, str).value
          } catch (__) {}
        }    
        return '' // use external default escaping
      }
    })
    .use(emoji)
    .use(subscript)
    .use(superscript)
    .use(footnote)
    .use(deflist)
    .use(abbreviation)
    .use(insert)
    .use(mark)
    .use(tasklists, { enabled: this.taskLists })
    this.renderHTML = this.renderHTML.bind(this)
  }
  handleEditorChange({html, md}) {
    console.log('handleEditorChange', html, md)
  }
  handleImageUpload(file, callback) {
    const reader = new FileReader()
    reader.onload = () => {      
      const convertBase64UrlToBlob = (urlData) => {  
        let arr = urlData.split(','), mime = arr[0].match(/:(.*?);/)[1]
        let bstr = atob(arr[1])
        let n = bstr.length
        let u8arr = new Uint8Array(n)
        while (n--) {
          u8arr[n] = bstr.charCodeAt(n)
        }
        return new Blob([u8arr], {type:mime})
      }
      const blob = convertBase64UrlToBlob(reader.result)
      setTimeout(() => {
        // setTimeout 模拟异步上传图片
        // 当异步上传获取图片地址后，执行calback回调（参数为imageUrl字符串），即可将图片地址写入markdown
        callback('https://avatars0.githubusercontent.com/u/21263805?s=40&v=4')
      }, 1000)
    }
    reader.readAsDataURL(file)
  }
  renderHTML(text) {
    // 模拟异步渲染Markdown
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve(this.mdParser.render(text))
      }, 1000)
    })
  }
  handleGetMdValue = () => {   
    this.mdEditor && alert(this.mdEditor.getMdValue())      
  }
  handleGetHtmlValue = () => {    
    this.mdEditor && alert(this.mdEditor.getHtmlValue())
  }
  render() {
    return (      
      <div>
        <nav>
          <button onClick={this.handleGetMdValue} >getMdValue</button>  
          <button onClick={this.handleGetHtmlValue} >getHtmlValue</button>  
        </nav>
        <section style="height: 500px">
          <MdEditor 
            ref={node => this.mdEditor = node}
            value={MOCK_DATA}
            style={{height: '400px'}}
            renderHTML={this.renderHTML}
            config={{
              view: {
                menu: true,
                md: true,
                html: true
              },
              imageUrl: 'https://octodex.github.com/images/minion.png'
            }}
            onChange={this.handleEditorChange} 
            onImageUpload={this.handleImageUpload}
          />
        </section>                        
      </div>      
    )
  }
}
```

### 最后

   欢迎大家使用和反馈，[项目地址](https://github.com/HarryChen0506/react-markdown-editor-lite) (https://github.com/HarryChen0506/react-markdown-editor-lite)， 你的点赞将是我莫大的动力😊

', firstPicture='', viewCount=null, createDate='null', updateDate='null'}}], result=ResultInfo{info='null', status=0, data=null}
2021-11-08 09:15:09:801 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 1ms GET URI=/api/admin/category, methodName=com.ivan.sunnyblog.web.controller.CategoryContoller.getCategoryList, args=[SearchVo{page=1, limit=10, categoryId=null}], result=ResultInfo{info='null', status=0, data=[Category (1, Life ), Category (2, liddffd)]}
2021-11-08 09:15:20:863 [http-nio-8081-exec-10] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 2ms GET URI=/api/admin/category, methodName=com.ivan.sunnyblog.web.controller.CategoryContoller.getCategoryList, args=[SearchVo{page=1, limit=10, categoryId=null}], result=ResultInfo{info='null', status=0, data=[Category (1, Life ), Category (2, liddffd)]}
2021-11-08 09:15:20:863 [http-nio-8081-exec-9] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 6ms GET URI=/api/admin/article/10005, methodName=com.ivan.sunnyblog.web.controller.ArticleController.getArticleDetail, args=[10005], result=ResultInfo{info='null', status=0, data=ArticleDetailVo{categoryId=1, BaseArticleVo{articleId=10005, status=1, title='dd', description='This is the doc of React markdown editor lite.
Enjoy!!', content='| Head | Head | Head | Head |
| --- | --- | --- | --- |
| Data | Data | Data | Data |
| Data | Data | Data | Data |

## 手把手教你写一个markdown编辑器

> 笔者在18年年末的时候接到一个开发任务——搭建一个AI项目的开放平台，其中的产品文档为转化为HTML格式的markdown文档。考虑到文档的即时更新，将文档信息做成了Ajax接口的形式。因此管理后台只需将textarea表单的内容通过markdown解析器进行HTML格式转化，然后将markdown内容和经转化的HTML文档都保存到数据库即可。
> 基本需求完成后，为了更好的用户体验，考虑将常用的编辑功能添加进来。改进版不仅支持了常用的文本编辑功能，还实现的UI界面的配置化，自定义语法解析器。本着造福伸手党的目的，以及积累些开源经验，笔者将该react 组件 [react-markdown-editor-lite](https://github.com/HarryChen0506/react-markdown-editor-lite) 进行了封装改造，并且发布到了开源社区。

### 预览
在线体验 [https://harrychen0506.github.io/react-markdown-editor-lite/](https://harrychen0506.github.io/react-markdown-editor-lite/)

![image](https://github.com//HarryChen0506/react-markdown-editor-lite/blob/master/image/react-markdown-editor-lite-v1.0.0.PNG?raw=true)

### 特点
* 轻量、基于React
* UI可配置, 如只显示编辑区或预览区
* 支持自定义markdown语法解析器,语法高亮等
* 支持常用的markdown编辑功能，如加粗，斜体等等...
* 支持功能按钮插拔化，用户可以自定义扩展组件
* 支持编辑区和预览区同步滚动

### 开发心得

- 文本编辑

  大多数常见的编辑器，包括富文本编辑器，利用了某些元素如div的contenteditable属性，配合selection、range、execCommand等API，实现了富文本编辑功能。这里面的实现比较复杂，所以有了"[为什么都说富文本编辑器是天坑？](https://www.zhihu.com/question/38699645)"这个说法。

  而markdown编辑器，核心的处理内容为简单语法的纯文本，复杂度相对来说比较低，并且input标签自带onSelect事件，可以很方便的获取选择信息（选择起始位置和选择文本值），因此要想实现编辑功能，只需将要改动的内容进行文本转换，然后进行重新拼接首尾，大功告成。
  
- markdown解析

  考察了几个社区流行的markdown解析器，比较流行的有[markdown](https://www.npmjs.com/package/markdown), [markdown-it](https://www.npmjs.com/package/markdown-it), [marked](https://www.npmjs.com/package/marked) 等等。综合考虑扩展性以及稳定性，笔者推荐使用markdown-it作为markdown的词法解析器，因为该解析器有比较多的插件，并且支持语法高亮。

- 同步滚动

  当选择分栏编辑的时候，滚动左侧的编辑区，右侧的预览区能自动滚动到对应的区域。方案参考了《[手把手教你用 100行代码实现基于 react的 markdown 输入 + 即时预览在线编辑器（一）](https://github.com/accforgit/blog-data/blob/master/%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91%E5%99%A8/README/README1.md)》。只需先计算出输入框容器元素与预览框容器元素之间最大scroll范围的比例值，然后根据主动滚动元素自身的scrollTop做相应的比例换算，即可知道对方区域的scrollTop值。

- 关于UI
 
  - 项目的字体库选择了Font Awesome风格，并且只选取了项目所需要的一些图标。
  - 编辑器的整体css均可通过全局覆盖的形式进行自定义。目前暂时只支持灰色主题。
  - 编辑器的显示区域包括菜单栏，编辑器，预览区，工具栏，通过配置组件的config属性，可以选择默认的展示区域。
  
### Install

```js
npm install react-markdown-editor-lite --save
```

### Props

| Property | Description | Type | default | Remarks |
| --- | --- | --- | --- | --- |
| value | markdown content | String | '' | required |
| style | component container style | Object | {height: '100%'} | not required |
| config | component config | Object | {view: {...}, logger: {...}} | not required |
| onChange | emitting when editor has changed | Function | ({html, md}) => {} | not required |
| onImageUpload | when image uploaded, callback emitting will get image markdown text | (file: File, callback: (url: string) => void) => void; | ({file, callback}) => {} | not required |
| renderHTML | Render markdown text to HTML. You can return either string, function or Promise | (text: string) => string|function|Promise | none | **required** |

### Example

``` js
'use strict';
import React from 'react'
import ReactDOM from 'react-dom'
import MdEditor from 'react-markdown-editor-lite'
import MarkdownIt from 'markdown-it'
import emoji from 'markdown-it-emoji'
import subscript from 'markdown-it-sub'
import superscript from 'markdown-it-sup'
import footnote from 'markdown-it-footnote'
import deflist from 'markdown-it-deflist'
import abbreviation from 'markdown-it-abbr'
import insert from 'markdown-it-ins'
import mark from 'markdown-it-mark'
import tasklists from 'markdown-it-task-lists'
import hljs from 'highlight.js'
import 'highlight.js/styles/atom-one-light.css'
// import 'highlight.js/styles/github.css'
import './index.less';

const MOCK_DATA = "I Love React."
export default class Demo extends React.Component {
  mdEditor = null
  mdParser = null
  constructor(props) {
    super(props)
    // initial a parsera
    this.mdParser = new MarkdownIt({
      html: true,
      linkify: true,
      typographer: true,
      highlight: function (str, lang) {
        if (lang && hljs.getLanguage(lang)) {
          try {
            return hljs.highlight(lang, str).value
          } catch (__) {}
        }    
        return '' // use external default escaping
      }
    })
    .use(emoji)
    .use(subscript)
    .use(superscript)
    .use(footnote)
    .use(deflist)
    .use(abbreviation)
    .use(insert)
    .use(mark)
    .use(tasklists, { enabled: this.taskLists })
    this.renderHTML = this.renderHTML.bind(this)
  }
  handleEditorChange({html, md}) {
    console.log('handleEditorChange', html, md)
  }
  handleImageUpload(file, callback) {
    const reader = new FileReader()
    reader.onload = () => {      
      const convertBase64UrlToBlob = (urlData) => {  
        let arr = urlData.split(','), mime = arr[0].match(/:(.*?);/)[1]
        let bstr = atob(arr[1])
        let n = bstr.length
        let u8arr = new Uint8Array(n)
        while (n--) {
          u8arr[n] = bstr.charCodeAt(n)
        }
        return new Blob([u8arr], {type:mime})
      }
      const blob = convertBase64UrlToBlob(reader.result)
      setTimeout(() => {
        // setTimeout 模拟异步上传图片
        // 当异步上传获取图片地址后，执行calback回调（参数为imageUrl字符串），即可将图片地址写入markdown
        callback('https://avatars0.githubusercontent.com/u/21263805?s=40&v=4')
      }, 1000)
    }
    reader.readAsDataURL(file)
  }
  renderHTML(text) {
    // 模拟异步渲染Markdown
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve(this.mdParser.render(text))
      }, 1000)
    })
  }
  handleGetMdValue = () => {   
    this.mdEditor && alert(this.mdEditor.getMdValue())      
  }
  handleGetHtmlValue = () => {    
    this.mdEditor && alert(this.mdEditor.getHtmlValue())
  }
  render() {
    return (      
      <div>
        <nav>
          <button onClick={this.handleGetMdValue} >getMdValue</button>  
          <button onClick={this.handleGetHtmlValue} >getHtmlValue</button>  
        </nav>
        <section style="height: 500px">
          <MdEditor 
            ref={node => this.mdEditor = node}
            value={MOCK_DATA}
            style={{height: '400px'}}
            renderHTML={this.renderHTML}
            config={{
              view: {
                menu: true,
                md: true,
                html: true
              },
              imageUrl: 'https://octodex.github.com/images/minion.png'
            }}
            onChange={this.handleEditorChange} 
            onImageUpload={this.handleImageUpload}
          />
        </section>                        
      </div>      
    )
  }
}
```

### 最后

   欢迎大家使用和反馈，[项目地址](https://github.com/HarryChen0506/react-markdown-editor-lite) (https://github.com/HarryChen0506/react-markdown-editor-lite)， 你的点赞将是我莫大的动力😊

', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Mon Nov 08 09:15:09 EST 2021'}}}
2021-11-08 09:22:56:612 [http-nio-8081-exec-5] INFO  io.lettuce.core.EpollProvider Starting without optional epoll library
2021-11-08 09:22:56:612 [http-nio-8081-exec-5] INFO  io.lettuce.core.KqueueProvider Starting without optional kqueue library
2021-11-08 09:22:56:667 [http-nio-8081-exec-5] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 435ms POST URI=/api/login, methodName=com.ivan.sunnyblog.web.controller.AccountController.login, args=[LoginVo{username='test', password='123456'}], result=ResultInfo{info='null', status=0, data=LoginResultVo{accessToken='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MzYzOTU3NzYsInVzZXJJZCI6MTAwMDAzLCJpYXQiOjE2MzYzODEzNzZ9.3F7Q7hgg82qSzmNQpA6Vx_rjL7WwKVvYUpxGHOSXu_Y', role=0}}
2021-11-08 09:24:50:405 [http-nio-8081-exec-8] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 28ms POST URI=/api/login, methodName=com.ivan.sunnyblog.web.controller.AccountController.login, args=[LoginVo{username='test', password='123456'}], result=ResultInfo{info='null', status=0, data=LoginResultVo{accessToken='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MzYzOTU4OTAsInVzZXJJZCI6MTAwMDAzLCJpYXQiOjE2MzYzODE0OTB9.YkhGy6ZgO4kIpdhOZYC-aTCUKek51jCQUykeD4Vquu0', role=0}}
2021-11-08 09:25:18:089 [http-nio-8081-exec-7] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 4ms POST URI=/api/login, methodName=com.ivan.sunnyblog.web.controller.AccountController.login, args=[LoginVo{username='test', password='123456'}], result=ResultInfo{info='null', status=0, data=LoginResultVo{accessToken='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MzYzOTU5MTgsInVzZXJJZCI6MTAwMDAzLCJpYXQiOjE2MzYzODE1MTh9.C0NrKIGcv-Ku6ywOD4gVGeJ33_pVVjWyAkg8SUzvBDk', role=0}}
2021-11-08 09:31:28:645 [http-nio-8081-exec-10] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 14ms POST URI=/api/login, methodName=com.ivan.sunnyblog.web.controller.AccountController.login, args=[LoginVo{username='test', password='123456'}], result=ResultInfo{info='null', status=0, data=LoginResultVo{accessToken='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MzYzOTYyODgsInVzZXJJZCI6MTAwMDAzLCJpYXQiOjE2MzYzODE4ODh9.fTLITs9vIxXjWUqPOOMVlXP7lwQgA8TrQslOAkdnMaQ', role=0}}
2021-11-08 09:31:28:694 [http-nio-8081-exec-1] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 6ms GET URI=/api/articles, methodName=com.ivan.sunnyblog.web.controller.ArticleController.getArticles, args=[SearchVo{page=1, limit=10, categoryId=null}], result=ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10005, status=1, title='dd', description='This is the doc of React markdown editor lite.
Enjoy!!', content='null', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Mon Nov 08 09:15:09 EST 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=2, name='liddffd', articleCount=null}, BaseArticleVo{articleId=10004, status=1, title='Spring boot', description='rerwerwer', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='Tue Oct 12 15:58:26 EDT 2021'}}]}
2021-11-08 09:31:28:704 [http-nio-8081-exec-5] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 16ms GET URI=/api/categories, methodName=com.ivan.sunnyblog.web.controller.CategoryContoller.getCategories, args=[], result=ResultInfo{info='null', status=0, data=[CategoryVo{categoryId=2, name='liddffd', articleCount=1}, CategoryVo{categoryId=1, name='Life ', articleCount=1}]}
2021-11-08 09:32:23:729 [http-nio-8081-exec-3] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 8ms POST URI=/api/login, methodName=com.ivan.sunnyblog.web.controller.AccountController.login, args=[LoginVo{username='test', password='123456'}], result=ResultInfo{info='null', status=0, data=LoginResultVo{accessToken='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MzYzOTYzNDMsInVzZXJJZCI6MTAwMDAzLCJpYXQiOjE2MzYzODE5NDN9.35gYk701Yr18BHjyDnzzfV5xJKaSPJ0UFG38Cg8h3Xo', role=0}}
2021-11-08 09:34:50:633 [http-nio-8081-exec-7] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 16ms POST URI=/api/login, methodName=com.ivan.sunnyblog.web.controller.AccountController.login, args=[LoginVo{username='test', password='123456'}], result=ResultInfo{info='null', status=0, data=LoginResultVo{accessToken='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MzYzOTY0OTAsInVzZXJJZCI6MTAwMDAzLCJpYXQiOjE2MzYzODIwOTB9.mSkGNW_N-b_75m8UIvdyaC80j7t7AbQe8Cp3EoIsF4M', role=0}}
2021-11-08 09:38:18:423 [http-nio-8081-exec-10] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 7ms POST URI=/api/login, methodName=com.ivan.sunnyblog.web.controller.AccountController.login, args=[LoginVo{username='test', password='123456'}], result=ResultInfo{info='null', status=0, data=LoginResultVo{accessToken='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MzYzOTY2OTgsInVzZXJJZCI6MTAwMDAzLCJpYXQiOjE2MzYzODIyOTh9.pHS-OygkHw9ruOYER7D-1-VlgtAU3yIVfnRTvJSIgEI', role=0}}
2021-11-08 09:39:08:967 [http-nio-8081-exec-4] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 4ms POST URI=/api/login, methodName=com.ivan.sunnyblog.web.controller.AccountController.login, args=[LoginVo{username='test', password='123456'}], result=ResultInfo{info='null', status=0, data=LoginResultVo{accessToken='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MzYzOTY3NDgsInVzZXJJZCI6MTAwMDAzLCJpYXQiOjE2MzYzODIzNDh9.twtPILiuX201ed9CTFxvGOsKHnSfX6SA4Au0sEhNsz8', role=0}}
2021-11-08 09:40:41:103 [http-nio-8081-exec-1] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 5ms POST URI=/api/login, methodName=com.ivan.sunnyblog.web.controller.AccountController.login, args=[LoginVo{username='test', password='123456'}], result=ResultInfo{info='null', status=0, data=LoginResultVo{accessToken='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MzYzOTY4NDEsInVzZXJJZCI6MTAwMDAzLCJpYXQiOjE2MzYzODI0NDF9.63XgxkrBDYITuDt8-eKu4lHudoVWVbScbNnxlf8VSbo', role=0}}
2021-11-08 09:40:41:266 [http-nio-8081-exec-5] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 2ms GET URI=/api/admin/category, methodName=com.ivan.sunnyblog.web.controller.CategoryContoller.getCategoryList, args=[SearchVo{page=1, limit=10, categoryId=null}], result=ResultInfo{info='null', status=0, data=[Category (1, Life ), Category (2, liddffd)]}
2021-11-08 09:41:29:342 [http-nio-8081-exec-3] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 7ms POST URI=/api/login, methodName=com.ivan.sunnyblog.web.controller.AccountController.login, args=[LoginVo{username='test', password='123456'}], result=ResultInfo{info='null', status=0, data=LoginResultVo{accessToken='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MzYzOTY4ODksInVzZXJJZCI6MTAwMDAzLCJpYXQiOjE2MzYzODI0ODl9.zWs98_z5a9Lw8q4uzaALDIma3_zu8hzByTJChSPq4vs', role=0}}
2021-11-08 09:42:32:436 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 5ms POST URI=/api/login, methodName=com.ivan.sunnyblog.web.controller.AccountController.login, args=[LoginVo{username='test', password='123456'}], result=ResultInfo{info='null', status=0, data=LoginResultVo{accessToken='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MzYzOTY5NTIsInVzZXJJZCI6MTAwMDAzLCJpYXQiOjE2MzYzODI1NTJ9.oyX6UK-KQH8oolwo99Iy0ND3EXkVECJE3HdgzEtVTFQ', role=0}}
2021-11-08 09:43:24:545 [http-nio-8081-exec-7] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 5ms POST URI=/api/login, methodName=com.ivan.sunnyblog.web.controller.AccountController.login, args=[LoginVo{username='test', password='123456'}], result=ResultInfo{info='null', status=0, data=LoginResultVo{accessToken='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MzYzOTcwMDQsInVzZXJJZCI6MTAwMDAzLCJpYXQiOjE2MzYzODI2MDR9.suAZpnaypEZgL_uj2-2uqS4dBoocsneLFTMzzqAqJR8', role=0}}
2021-11-08 09:43:24:693 [http-nio-8081-exec-9] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 1ms GET URI=/api/admin/category, methodName=com.ivan.sunnyblog.web.controller.CategoryContoller.getCategoryList, args=[SearchVo{page=1, limit=10, categoryId=null}], result=ResultInfo{info='null', status=0, data=[Category (1, Life ), Category (2, liddffd)]}
2021-11-08 09:43:31:093 [http-nio-8081-exec-10] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 9ms GET URI=/api/admin/article, methodName=com.ivan.sunnyblog.web.controller.ArticleController.getArticleList, args=[SearchVo{page=1, limit=20, categoryId=null}], result=ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10005, status=1, title='dd', description='This is the doc of React markdown editor lite.
Enjoy!!', content='null', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Mon Nov 08 09:15:09 EST 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=2, name='liddffd', articleCount=null}, BaseArticleVo{articleId=10004, status=1, title='Spring boot', description='rerwerwer', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='Tue Oct 12 15:58:26 EDT 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10003, status=0, title='dd', description='test', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:57:33 EDT 2021', updateDate='Tue Oct 12 15:57:33 EDT 2021'}}]}
2021-11-08 09:43:43:500 [http-nio-8081-exec-4] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 45ms GET URI=/api/admin/article, methodName=com.ivan.sunnyblog.web.controller.ArticleController.getArticleList, args=[SearchVo{page=1, limit=20, categoryId=null}], result=ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10005, status=1, title='dd', description='This is the doc of React markdown editor lite.
Enjoy!!', content='null', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Mon Nov 08 09:15:09 EST 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=2, name='liddffd', articleCount=null}, BaseArticleVo{articleId=10004, status=1, title='Spring boot', description='rerwerwer', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='Tue Oct 12 15:58:26 EDT 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10003, status=0, title='dd', description='test', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:57:33 EDT 2021', updateDate='Tue Oct 12 15:57:33 EDT 2021'}}]}
2021-11-08 09:44:01:404 [http-nio-8081-exec-2] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 3ms POST URI=/api/login, methodName=com.ivan.sunnyblog.web.controller.AccountController.login, args=[LoginVo{username='test', password='123456'}], result=ResultInfo{info='null', status=0, data=LoginResultVo{accessToken='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MzYzOTcwNDEsInVzZXJJZCI6MTAwMDAzLCJpYXQiOjE2MzYzODI2NDF9.D2DEAELpT4hk8X9u5JNRjcjIcpHHnKYmF65uo_TPec8', role=0}}
2021-11-08 09:44:01:566 [http-nio-8081-exec-1] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 7ms GET URI=/api/admin/article, methodName=com.ivan.sunnyblog.web.controller.ArticleController.getArticleList, args=[SearchVo{page=1, limit=20, categoryId=null}], result=ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10005, status=1, title='dd', description='This is the doc of React markdown editor lite.
Enjoy!!', content='null', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Mon Nov 08 09:15:09 EST 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=2, name='liddffd', articleCount=null}, BaseArticleVo{articleId=10004, status=1, title='Spring boot', description='rerwerwer', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='Tue Oct 12 15:58:26 EDT 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10003, status=0, title='dd', description='test', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:57:33 EDT 2021', updateDate='Tue Oct 12 15:57:33 EDT 2021'}}]}
2021-11-08 09:44:20:501 [http-nio-8081-exec-5] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 37ms GET URI=/api/admin/article, methodName=com.ivan.sunnyblog.web.controller.ArticleController.getArticleList, args=[SearchVo{page=1, limit=20, categoryId=null}], result=ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10005, status=1, title='dd', description='This is the doc of React markdown editor lite.
Enjoy!!', content='null', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Mon Nov 08 09:15:09 EST 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=2, name='liddffd', articleCount=null}, BaseArticleVo{articleId=10004, status=1, title='Spring boot', description='rerwerwer', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='Tue Oct 12 15:58:26 EDT 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10003, status=0, title='dd', description='test', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:57:33 EDT 2021', updateDate='Tue Oct 12 15:57:33 EDT 2021'}}]}
2021-11-08 10:52:23:150 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=10m4s376ms).
2021-11-08 11:01:30:389 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=8m37s221ms).
2021-11-08 11:51:11:695 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=49m41s306ms).
2021-11-08 13:29:28:207 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h38m16s512ms).
2021-11-08 14:45:26:329 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h15m58s122ms).
2021-11-08 15:51:00:963 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=6m34s299ms).
2021-11-08 15:53:05:537 [http-nio-8081-exec-7] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 217ms GET URI=/api/articles, methodName=com.ivan.sunnyblog.web.controller.ArticleController.getArticles, args=[SearchVo{page=1, limit=10, categoryId=null}], result=ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10005, status=1, title='dd', description='This is the doc of React markdown editor lite.
Enjoy!!', content='null', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Mon Nov 08 09:15:09 EST 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=2, name='liddffd', articleCount=null}, BaseArticleVo{articleId=10004, status=1, title='Spring boot', description='rerwerwer', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='Tue Oct 12 15:58:26 EDT 2021'}}]}
2021-11-08 15:53:05:554 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 273ms GET URI=/api/categories, methodName=com.ivan.sunnyblog.web.controller.CategoryContoller.getCategories, args=[], result=ResultInfo{info='null', status=0, data=[CategoryVo{categoryId=2, name='liddffd', articleCount=1}, CategoryVo{categoryId=1, name='Life ', articleCount=1}]}
2021-11-08 16:14:33:538 [http-nio-8081-exec-2] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 73ms GET URI=/api/categories, methodName=com.ivan.sunnyblog.web.controller.CategoryContoller.getCategories, args=[], result=ResultInfo{info='null', status=0, data=[CategoryVo{categoryId=2, name='liddffd', articleCount=1}, CategoryVo{categoryId=1, name='Life ', articleCount=1}]}
2021-11-08 16:14:33:539 [http-nio-8081-exec-4] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 64ms GET URI=/api/articles, methodName=com.ivan.sunnyblog.web.controller.ArticleController.getArticles, args=[SearchVo{page=1, limit=10, categoryId=null}], result=ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10005, status=1, title='dd', description='This is the doc of React markdown editor lite.
Enjoy!!', content='null', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Mon Nov 08 09:15:09 EST 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=2, name='liddffd', articleCount=null}, BaseArticleVo{articleId=10004, status=1, title='Spring boot', description='rerwerwer', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='Tue Oct 12 15:58:26 EDT 2021'}}]}
2021-11-08 16:19:20:460 [http-nio-8081-exec-8] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 31ms GET URI=/api/categories, methodName=com.ivan.sunnyblog.web.controller.CategoryContoller.getCategories, args=[], result=ResultInfo{info='null', status=0, data=[CategoryVo{categoryId=2, name='liddffd', articleCount=1}, CategoryVo{categoryId=1, name='Life ', articleCount=1}]}
2021-11-08 16:19:20:464 [http-nio-8081-exec-3] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 42ms GET URI=/api/articles, methodName=com.ivan.sunnyblog.web.controller.ArticleController.getArticles, args=[SearchVo{page=1, limit=10, categoryId=null}], result=ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10005, status=1, title='dd', description='This is the doc of React markdown editor lite.
Enjoy!!', content='null', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Mon Nov 08 09:15:09 EST 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=2, name='liddffd', articleCount=null}, BaseArticleVo{articleId=10004, status=1, title='Spring boot', description='rerwerwer', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='Tue Oct 12 15:58:26 EDT 2021'}}]}
2021-11-08 16:19:28:516 [http-nio-8081-exec-7] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 13ms GET URI=/api/categories, methodName=com.ivan.sunnyblog.web.controller.CategoryContoller.getCategories, args=[], result=ResultInfo{info='null', status=0, data=[CategoryVo{categoryId=2, name='liddffd', articleCount=1}, CategoryVo{categoryId=1, name='Life ', articleCount=1}]}
2021-11-08 16:19:28:568 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 27ms GET URI=/api/articles, methodName=com.ivan.sunnyblog.web.controller.ArticleController.getArticles, args=[SearchVo{page=1, limit=10, categoryId=null}], result=ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10005, status=1, title='dd', description='This is the doc of React markdown editor lite.
Enjoy!!', content='null', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Mon Nov 08 09:15:09 EST 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=2, name='liddffd', articleCount=null}, BaseArticleVo{articleId=10004, status=1, title='Spring boot', description='rerwerwer', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='Tue Oct 12 15:58:26 EDT 2021'}}]}
2021-11-08 16:19:35:796 [http-nio-8081-exec-10] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 3ms GET URI=/api/categories, methodName=com.ivan.sunnyblog.web.controller.CategoryContoller.getCategories, args=[], result=ResultInfo{info='null', status=0, data=[CategoryVo{categoryId=2, name='liddffd', articleCount=1}, CategoryVo{categoryId=1, name='Life ', articleCount=1}]}
2021-11-08 16:19:35:826 [http-nio-8081-exec-9] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 5ms GET URI=/api/articles, methodName=com.ivan.sunnyblog.web.controller.ArticleController.getArticles, args=[SearchVo{page=1, limit=10, categoryId=null}], result=ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10005, status=1, title='dd', description='This is the doc of React markdown editor lite.
Enjoy!!', content='null', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Mon Nov 08 09:15:09 EST 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=2, name='liddffd', articleCount=null}, BaseArticleVo{articleId=10004, status=1, title='Spring boot', description='rerwerwer', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='Tue Oct 12 15:58:26 EDT 2021'}}]}
2021-11-08 16:19:37:143 [http-nio-8081-exec-2] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 11ms GET URI=/api/categories, methodName=com.ivan.sunnyblog.web.controller.CategoryContoller.getCategories, args=[], result=ResultInfo{info='null', status=0, data=[CategoryVo{categoryId=2, name='liddffd', articleCount=1}, CategoryVo{categoryId=1, name='Life ', articleCount=1}]}
2021-11-08 16:19:37:145 [http-nio-8081-exec-4] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 18ms GET URI=/api/articles, methodName=com.ivan.sunnyblog.web.controller.ArticleController.getArticles, args=[SearchVo{page=1, limit=10, categoryId=null}], result=ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10005, status=1, title='dd', description='This is the doc of React markdown editor lite.
Enjoy!!', content='null', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Mon Nov 08 09:15:09 EST 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=2, name='liddffd', articleCount=null}, BaseArticleVo{articleId=10004, status=1, title='Spring boot', description='rerwerwer', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='Tue Oct 12 15:58:26 EDT 2021'}}]}
2021-11-08 16:19:38:763 [http-nio-8081-exec-1] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 2ms GET URI=/api/categories, methodName=com.ivan.sunnyblog.web.controller.CategoryContoller.getCategories, args=[], result=ResultInfo{info='null', status=0, data=[CategoryVo{categoryId=2, name='liddffd', articleCount=1}, CategoryVo{categoryId=1, name='Life ', articleCount=1}]}
2021-11-08 16:19:38:786 [http-nio-8081-exec-5] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 5ms GET URI=/api/articles, methodName=com.ivan.sunnyblog.web.controller.ArticleController.getArticles, args=[SearchVo{page=1, limit=10, categoryId=null}], result=ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10005, status=1, title='dd', description='This is the doc of React markdown editor lite.
Enjoy!!', content='null', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Mon Nov 08 09:15:09 EST 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=2, name='liddffd', articleCount=null}, BaseArticleVo{articleId=10004, status=1, title='Spring boot', description='rerwerwer', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='Tue Oct 12 15:58:26 EDT 2021'}}]}
2021-11-08 16:19:39:978 [http-nio-8081-exec-3] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 2ms GET URI=/api/categories, methodName=com.ivan.sunnyblog.web.controller.CategoryContoller.getCategories, args=[], result=ResultInfo{info='null', status=0, data=[CategoryVo{categoryId=2, name='liddffd', articleCount=1}, CategoryVo{categoryId=1, name='Life ', articleCount=1}]}
2021-11-08 16:19:40:010 [http-nio-8081-exec-8] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 35ms GET URI=/api/articles, methodName=com.ivan.sunnyblog.web.controller.ArticleController.getArticles, args=[SearchVo{page=1, limit=10, categoryId=null}], result=ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10005, status=1, title='dd', description='This is the doc of React markdown editor lite.
Enjoy!!', content='null', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Mon Nov 08 09:15:09 EST 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=2, name='liddffd', articleCount=null}, BaseArticleVo{articleId=10004, status=1, title='Spring boot', description='rerwerwer', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='Tue Oct 12 15:58:26 EDT 2021'}}]}
2021-11-08 16:19:47:993 [http-nio-8081-exec-7] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 5ms GET URI=/api/categories, methodName=com.ivan.sunnyblog.web.controller.CategoryContoller.getCategories, args=[], result=ResultInfo{info='null', status=0, data=[CategoryVo{categoryId=2, name='liddffd', articleCount=1}, CategoryVo{categoryId=1, name='Life ', articleCount=1}]}
2021-11-08 16:19:48:024 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 6ms GET URI=/api/articles, methodName=com.ivan.sunnyblog.web.controller.ArticleController.getArticles, args=[SearchVo{page=1, limit=10, categoryId=null}], result=ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10005, status=1, title='dd', description='This is the doc of React markdown editor lite.
Enjoy!!', content='null', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Mon Nov 08 09:15:09 EST 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=2, name='liddffd', articleCount=null}, BaseArticleVo{articleId=10004, status=1, title='Spring boot', description='rerwerwer', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='Tue Oct 12 15:58:26 EDT 2021'}}]}
2021-11-08 16:19:50:618 [http-nio-8081-exec-9] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 4ms GET URI=/api/categories, methodName=com.ivan.sunnyblog.web.controller.CategoryContoller.getCategories, args=[], result=ResultInfo{info='null', status=0, data=[CategoryVo{categoryId=2, name='liddffd', articleCount=1}, CategoryVo{categoryId=1, name='Life ', articleCount=1}]}
2021-11-08 16:19:50:623 [http-nio-8081-exec-10] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 9ms GET URI=/api/articles, methodName=com.ivan.sunnyblog.web.controller.ArticleController.getArticles, args=[SearchVo{page=1, limit=10, categoryId=null}], result=ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10005, status=1, title='dd', description='This is the doc of React markdown editor lite.
Enjoy!!', content='null', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Mon Nov 08 09:15:09 EST 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=2, name='liddffd', articleCount=null}, BaseArticleVo{articleId=10004, status=1, title='Spring boot', description='rerwerwer', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='Tue Oct 12 15:58:26 EDT 2021'}}]}
2021-11-08 16:19:55:930 [http-nio-8081-exec-2] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 22ms GET URI=/api/categories, methodName=com.ivan.sunnyblog.web.controller.CategoryContoller.getCategories, args=[], result=ResultInfo{info='null', status=0, data=[CategoryVo{categoryId=2, name='liddffd', articleCount=1}, CategoryVo{categoryId=1, name='Life ', articleCount=1}]}
2021-11-08 16:19:55:966 [http-nio-8081-exec-4] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 16ms GET URI=/api/articles, methodName=com.ivan.sunnyblog.web.controller.ArticleController.getArticles, args=[SearchVo{page=1, limit=10, categoryId=null}], result=ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10005, status=1, title='dd', description='This is the doc of React markdown editor lite.
Enjoy!!', content='null', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Mon Nov 08 09:15:09 EST 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=2, name='liddffd', articleCount=null}, BaseArticleVo{articleId=10004, status=1, title='Spring boot', description='rerwerwer', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='Tue Oct 12 15:58:26 EDT 2021'}}]}
2021-11-08 16:20:00:422 [http-nio-8081-exec-1] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 8ms GET URI=/api/articles, methodName=com.ivan.sunnyblog.web.controller.ArticleController.getArticles, args=[SearchVo{page=1, limit=10, categoryId=null}], result=ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10005, status=1, title='dd', description='This is the doc of React markdown editor lite.
Enjoy!!', content='null', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Mon Nov 08 09:15:09 EST 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=2, name='liddffd', articleCount=null}, BaseArticleVo{articleId=10004, status=1, title='Spring boot', description='rerwerwer', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='Tue Oct 12 15:58:26 EDT 2021'}}]}
2021-11-08 16:20:05:974 [http-nio-8081-exec-5] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 3ms GET URI=/api/categories, methodName=com.ivan.sunnyblog.web.controller.CategoryContoller.getCategories, args=[], result=ResultInfo{info='null', status=0, data=[CategoryVo{categoryId=2, name='liddffd', articleCount=1}, CategoryVo{categoryId=1, name='Life ', articleCount=1}]}
2021-11-08 16:20:06:005 [http-nio-8081-exec-3] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 7ms GET URI=/api/articles, methodName=com.ivan.sunnyblog.web.controller.ArticleController.getArticles, args=[SearchVo{page=1, limit=10, categoryId=null}], result=ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10005, status=1, title='dd', description='This is the doc of React markdown editor lite.
Enjoy!!', content='null', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Mon Nov 08 09:15:09 EST 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=2, name='liddffd', articleCount=null}, BaseArticleVo{articleId=10004, status=1, title='Spring boot', description='rerwerwer', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='Tue Oct 12 15:58:26 EDT 2021'}}]}
2021-11-08 16:22:24:026 [http-nio-8081-exec-9] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 1ms GET URI=/api/categories, methodName=com.ivan.sunnyblog.web.controller.CategoryContoller.getCategories, args=[], result=ResultInfo{info='null', status=0, data=[CategoryVo{categoryId=2, name='liddffd', articleCount=1}, CategoryVo{categoryId=1, name='Life ', articleCount=1}]}
2021-11-08 16:22:24:030 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 5ms GET URI=/api/articles, methodName=com.ivan.sunnyblog.web.controller.ArticleController.getArticles, args=[SearchVo{page=1, limit=10, categoryId=null}], result=ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10005, status=1, title='dd', description='This is the doc of React markdown editor lite.
Enjoy!!', content='null', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Mon Nov 08 09:15:09 EST 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=2, name='liddffd', articleCount=null}, BaseArticleVo{articleId=10004, status=1, title='Spring boot', description='rerwerwer', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='Tue Oct 12 15:58:26 EDT 2021'}}]}
2021-11-08 16:22:25:928 [http-nio-8081-exec-10] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 3ms GET URI=/api/categories, methodName=com.ivan.sunnyblog.web.controller.CategoryContoller.getCategories, args=[], result=ResultInfo{info='null', status=0, data=[CategoryVo{categoryId=2, name='liddffd', articleCount=1}, CategoryVo{categoryId=1, name='Life ', articleCount=1}]}
2021-11-08 16:22:25:953 [http-nio-8081-exec-2] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 6ms GET URI=/api/articles, methodName=com.ivan.sunnyblog.web.controller.ArticleController.getArticles, args=[SearchVo{page=1, limit=10, categoryId=null}], result=ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10005, status=1, title='dd', description='This is the doc of React markdown editor lite.
Enjoy!!', content='null', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Mon Nov 08 09:15:09 EST 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=2, name='liddffd', articleCount=null}, BaseArticleVo{articleId=10004, status=1, title='Spring boot', description='rerwerwer', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='Tue Oct 12 15:58:26 EDT 2021'}}]}
2021-11-08 16:55:43:926 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=33m12s809ms).
2021-11-08 18:17:52:135 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h22m8s211ms).
2021-11-08 18:54:38:079 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=36m45s944ms).
2021-11-08 20:13:59:919 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h19m21s840ms).
2021-11-08 20:58:56:649 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=44m56s730ms).
2021-11-08 21:34:17:124 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=35m20s475ms).
2021-11-08 22:15:44:927 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=40m27s785ms).
2021-11-08 23:29:52:026 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h14m7s99ms).
2021-11-08 23:30:01:675 [http-nio-8081-exec-5] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 28ms GET URI=/api/categories, methodName=com.ivan.sunnyblog.web.controller.CategoryContoller.getCategories, args=[], result=ResultInfo{info='null', status=0, data=[CategoryVo{categoryId=2, name='liddffd', articleCount=1}, CategoryVo{categoryId=1, name='Life ', articleCount=1}]}
2021-11-08 23:30:01:705 [http-nio-8081-exec-3] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 10ms GET URI=/api/articles, methodName=com.ivan.sunnyblog.web.controller.ArticleController.getArticles, args=[SearchVo{page=1, limit=10, categoryId=null}], result=ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10005, status=1, title='dd', description='This is the doc of React markdown editor lite.
Enjoy!!', content='null', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Mon Nov 08 09:15:09 EST 2021'}}, ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=2, name='liddffd', articleCount=null}, BaseArticleVo{articleId=10004, status=1, title='Spring boot', description='rerwerwer', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='Tue Oct 12 15:58:26 EDT 2021'}}]}
2021-11-08 23:33:58:687 [http-nio-8081-exec-7] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 11ms GET URI=/api/categories, methodName=com.ivan.sunnyblog.web.controller.CategoryContoller.getCategories, args=[], result=ResultInfo{info='null', status=0, data=[CategoryVo{categoryId=2, name='liddffd', articleCount=1}, CategoryVo{categoryId=1, name='Life ', articleCount=1}]}
2021-11-08 23:33:58:745 [http-nio-8081-exec-6] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 7ms GET URI=/api/articles, methodName=com.ivan.sunnyblog.web.controller.ArticleController.getArticles, args=[SearchVo{page=1, limit=10, categoryId=2}], result=ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=2, name='liddffd', articleCount=null}, BaseArticleVo{articleId=10004, status=1, title='Spring boot', description='rerwerwer', content='null', firstPicture='null', viewCount=0, createDate='Tue Oct 12 15:58:26 EDT 2021', updateDate='Tue Oct 12 15:58:26 EDT 2021'}}]}
2021-11-08 23:34:12:337 [http-nio-8081-exec-2] INFO  com.ivan.sunnyblog.web.aop.ControllerAspect *** Request Success ***: 15ms GET URI=/api/articles, methodName=com.ivan.sunnyblog.web.controller.ArticleController.getArticles, args=[SearchVo{page=1, limit=10, categoryId=1}], result=ResultInfo{info='null', status=0, data=[ArticleVo{userInfo=UserInfoVo{userId=100001, nickName='ivan', userName='ivan'}, category=CategoryVo{categoryId=1, name='Life ', articleCount=null}, BaseArticleVo{articleId=10005, status=1, title='dd', description='This is the doc of React markdown editor lite.
Enjoy!!', content='null', firstPicture='', viewCount=0, createDate='Sun Nov 07 14:09:29 EST 2021', updateDate='Mon Nov 08 09:15:09 EST 2021'}}]}
